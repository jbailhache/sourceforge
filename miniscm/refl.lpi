
(eval (mp '(begin

(define LIST1 '(Q () ECH CONS))

(define /REPEVOL '(
	INTERP 
	REP NCONSPTHEN I :
	REP CDR ECH CAR ENLINSTR CONS))

(define /APPLIQ '(
	Q () Q STOP CONS ECH CONS AJINSTR Q LIST1 /REPEVOL))

(define /APPREMINSTR '(
	REP ENLINSTR ECH PREMINSTR /APPLIQ))

(define *REPEVOL '(
	/REPEVOL REP NCONSPTHEN I :
	REP CDR *REPEVOL ECH CAR CONS))

(define *APPLIQ '(
	Q () Q STOP CONS ECH CONS AJINSTR LIST1 *REPEVOL))

(define *APPREMINSTR '(
	REP ENLINSTR ECH PREMINSTR *APPLIQ))

(define MAPKAR '(
	C Q (DES DES DES 
		(GETH0 NCONSPTHEN GETH0
		    (GETH0 CAR GETH1 GETH2 EXEC 
			(GETH0 CDR GETH1 Q () GETH2 CONS Q MAPKAR CONS EXEC
				(ECH CONS) 
			)
		    )
	      )
		MONDEP MONDEP MONDEP)))

(define values '(
	GETCTX-ENLINSTR : (REP *APPREMINSTR Q () MAPKAR (DEP SOMPIL) 
				 ECH ENLINSTR ECH EMPIL) 
				 SETCTX))
	
(define SOMPIL '(CDR CDR CAR CAR))

(define cut '(GETCTX-ENLINSTR : /APPREMINSTR CAR SETCTX))

(define bloc '(GETCTX-ENLINSTR : *APPREMINSTR SETCTXS))

(define hyp '(
	GETCTX-ENLINSTR : REP /APPREMINSTR NCONSPTHEN END :
	ENLINSTR SETCTX))

(define prolognot '(
	GETCTX-ENLINSTR : REP /APPREMINSTR NCONSPTHEN (ENLINSTR SETCTX)
	END))

(define prologif '(
	GETCTX-ENLINSTR : DES 
		GETH0 ENLINSTR ENLINSTR ENLINSTR 
		GETH0 PREMINSTR
		*APPLIQ 
		REP NCONSPTHEN
			(GETH0 ENLINSTR ENLINSTR SETCTX) :
		GETH0 CDR CAR CDR CAR MAPKAR AJINSTR SETCTXS))

)))






	 