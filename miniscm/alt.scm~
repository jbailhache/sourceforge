
(define lconts '())

(define (ealt a b)
 (call/cc (lambda (ka)
  (call/cc (lambda (kb)
   (set! lconts (cons kb lconts))
   (ka a) )) 
  b
 )) )

(define alt (flambda (a b)
 (call/cc (lambda (ka)
  (call/cc (lambda (kb)
   (set! lconts (cons kb lconts))
   (ka (eval a)) )) 
  (eval b)
 )) ))

(define mlalt (mlambda (m a b)
 (call/cc (lambda (ka)
  (call/cc (lambda (kb)
   (set! lconts (cons kb lconts))
   (ka (eval a)) )) 
  (eval b)
 )) ))

(macro malt (lambda ((m a b))
 (call/cc (lambda (ka)
  (call/cc (lambda (kb)
   (set! lconts (cons kb lconts))
   (ka a) )) 
  b
 )) )

(define (end)
 (if (not (pair? lconts))
  (begin
   (display "end: no more continuation
")
   '#f)
  (let ((kb (car lconts)))
   (set! lconts (cdr lconts))
   (kb) ) ) )


