@ Generated by gcc 3.2.2 for StrongARM/WinCE/PE
	.file	"/pgcc/samp/cvm/cvm.c"
	.global	labels
	.bss
	.align	0
labels:
	.space	9216
	.global	cod
	.align	0
cod:
	.space	32000
	.global	lab
	.align	0
lab:
	.space	1024
	.global	nlab
	.data
	.align	0
nlab:
	.word	0
	.global	label
	.bss
	.align	0
label:
	.space	9216
	.global	dic
	.align	0
dic:
	.space	4000
	.global	freedic
	.align	0
freedic:
	.space	4
	.global	freespace
	.align	0
freespace:
	.space	4
	.global	gpw
	.align	0
gpw:
	.space	4
	.global	gwri
	.align	0
gwri:
	.space	4
	.global	sva
	.align	0
sva:
	.space	64
	.global	cvmin
	.data
	.align	0
cvmin:
	.word	0
	.global	pgetchr
	.align	0
pgetchr:
	.word	_Z7getchr1v
	.global	cr
	.bss
cr:
	.space	1
	.global	wr
wr:
	.space	32
	.global	awr
awr:
	.space	32
	.global	f_tasm
	.data
	.align	0
f_tasm:
	.word	0
	.global	f_asmi
	.align	0
f_asmi:
	.word	0
	.global	f_asml
	.align	0
f_asml:
	.word	0
	.global	f_x86
	.align	0
f_x86:
	.word	0
	.global	last_label
	.bss
last_label:
	.space	200
	.global	reg
	.align	0
reg:
	.space	64
	.global	stack
	.align	0
stack:
	.space	4000
	.global	sp
	.align	0
sp:
	.space	4
	.global	gnw
	.data
	.align	0
gnw:
	.word	0
	.text
	.align	0
	.global	_Z8init_dicv
_Z8init_dicv:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	ldr	r2, L2
	ldr	r3, L2+4
	str	r3, [r2, #0]
	ldmea	fp, {fp, sp, pc}
L3:
	.align	0
L2:
	.word	freedic
	.word	dic
	.align	0
	.global	_Z8getchr1av
_Z8getchr1av:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	bl	getchar
	mov	r3, r0
	strb	r3, [fp, #-13]
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z7getchr1v
_Z7getchr1v:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	ldr	r3, L7
	ldr	r0, [r3, #0]
	bl	fgetc
	mov	r3, r0
	strb	r3, [fp, #-13]
	ldr	r3, L7
	ldr	r0, [r3, #0]
	bl	feof
	mov	r3, r0
	cmp	r3, #0
	beq	L6
	mov	r0, #0
	bl	_getstdfilex
	mov	r2, r0
	ldr	r3, L7
	str	r2, [r3, #0]
	ldr	r3, L7
	ldr	r0, [r3, #0]
	bl	fgetc
	mov	r3, r0
	strb	r3, [fp, #-13]
L6:
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L8:
	.align	0
L7:
	.word	cvmin
	.align	0
	.global	_Z6putchrh
_Z6putchrh:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	mov	r3, r0
	strb	r3, [fp, #-13]
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	mov	r0, r3
	bl	putchar
	ldmea	fp, {fp, sp, pc}
	.section .rdata
	.align	0
LC0:
	.ascii	" %d \000"
	.text
	.align	0
	.global	_Z8printdeci
_Z8printdeci:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, L11
	ldr	r1, [fp, #-16]
	bl	printf
	ldmea	fp, {fp, sp, pc}
L12:
	.align	0
L11:
	.word	LC0
	.section .rdata
	.align	0
LC1:
	.ascii	" %X \000"
	.text
	.align	0
	.global	_Z8printhexi
_Z8printhexi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, L14
	ldr	r1, [fp, #-16]
	bl	printf
	ldmea	fp, {fp, sp, pc}
L15:
	.align	0
L14:
	.word	LC1
	.align	0
	.global	_Z9readcaracv
_Z9readcaracv:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	ldr	r3, L17
	ldr	r3, [r3, #0]
	mov	lr, pc
	mov	pc, r3
	mov	r2, r0
	ldr	r3, L17+4
	strb	r2, [r3, #0]
	ldr	r3, L17+4
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L18:
	.align	0
L17:
	.word	pgetchr
	.word	cr
	.align	0
	.global	_Z6isblnkh
_Z6isblnkh:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	mov	r3, r0
	strb	r3, [fp, #-13]
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	cmp	r3, #32
	beq	L21
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	cmp	r3, #9
	beq	L21
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	cmp	r3, #10
	beq	L21
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	cmp	r3, #13
	beq	L21
	b	L20
L21:
	mov	r3, #1
	str	r3, [fp, #-20]
	b	L19
L20:
	mov	r3, #0
	str	r3, [fp, #-20]
L19:
	ldr	r0, [fp, #-20]
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z11iswordcarach
_Z11iswordcarach:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	mov	r3, r0
	strb	r3, [fp, #-13]
	mov	r3, #0
	str	r3, [fp, #-20]
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	mov	r0, r3
	bl	_Z6isblnkh
	mov	r3, r0
	cmp	r3, #0
	bne	L24
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	cmp	r3, #0
	beq	L24
	mov	r3, #1
	str	r3, [fp, #-20]
L24:
	ldr	r3, [fp, #-20]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z6readtocPc
_Z6readtocPc:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	mov	r3, r0
	str	r1, [fp, #-20]
	strb	r3, [fp, #-13]
L26:
	bl	_Z9readcaracv
	ldr	r3, L30
	ldrb	r2, [r3, #0]	@ zero_extendqisi2
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	cmp	r2, r3
	bne	L29
	b	L27
L29:
	sub	r1, fp, #20
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, L30
	ldrb	r3, [r3, #0]
	strb	r3, [r0, #0]
	add	r2, r2, #1
	str	r2, [r1, #0]
	b	L26
L27:
	sub	r1, fp, #20
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	mov	r3, #0
	strb	r3, [r0, #0]
	add	r2, r2, #1
	str	r2, [r1, #0]
	ldmea	fp, {fp, sp, pc}
L31:
	.align	0
L30:
	.word	cr
	.section .rdata
	.align	0
LC2:
	.ascii	"%x\000"
	.text
	.align	0
	.global	_Z8readwordv
_Z8readwordv:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	bl	_Z9readcaracv
L33:
	ldr	r3, L39
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	mov	r0, r3
	bl	_Z6isblnkh
	mov	r3, r0
	cmp	r3, #0
	bne	L35
	b	L34
L35:
	bl	_Z9readcaracv
	b	L33
L34:
	mov	r3, #0
	str	r3, [fp, #-16]
L36:
	ldr	r3, L39
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	mov	r0, r3
	bl	_Z11iswordcarach
	mov	r3, r0
	cmp	r3, #0
	bne	L38
	b	L37
L38:
	ldr	r2, L39+4
	ldr	r3, [fp, #-16]
	add	r2, r2, r3
	ldr	r3, L39
	ldrb	r3, [r3, #0]
	strb	r3, [r2, #0]
	ldr	r2, L39+8
	ldr	r3, [fp, #-16]
	add	r2, r2, r3
	ldr	r3, L39
	ldrb	r3, [r3, #0]
	strb	r3, [r2, #0]
	ldr	r3, [fp, #-16]
	add	r3, r3, #1
	str	r3, [fp, #-16]
	bl	_Z9readcaracv
	b	L36
L37:
	ldr	r2, L39+4
	ldr	r3, [fp, #-16]
	add	r2, r2, r3
	mov	r3, #0
	strb	r3, [r2, #0]
	ldr	r2, L39+8
	ldr	r3, [fp, #-16]
	add	r2, r2, r3
	mov	r3, #0
	strb	r3, [r2, #0]
	ldr	r0, L39+8
	ldr	r1, L39+12
	ldr	r2, L39+16
	bl	sscanf
	ldmea	fp, {fp, sp, pc}
L40:
	.align	0
L39:
	.word	cr
	.word	wr
	.word	awr
	.word	LC2
	.word	gwri
	.section .rdata
	.align	0
LC3:
	.ascii	" <%s> \000"
	.align	0
LC4:
	.ascii	"BYE\000"
	.text
	.align	0
	.global	_Z12testreadwordv
_Z12testreadwordv:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	mov	r0, r0	@ nop
L42:
	bl	_Z8readwordv
	ldr	r0, L46
	ldr	r1, L46+4
	bl	printf
	ldr	r0, L46+4
	ldr	r1, L46+8
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L42
	ldmea	fp, {fp, sp, pc}
L47:
	.align	0
L46:
	.word	LC3
	.word	wr
	.word	LC4
	.align	0
	.global	_Z4slenPh
_Z4slenPh:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, [fp, #-16]
	bl	strlen
	mov	r3, r0
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z4scmpPhS_
_Z4scmpPhS_:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r0, [fp, #-16]
	ldr	r1, [fp, #-20]
	bl	strcmp
	mov	r3, r0
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z4scpyPhS_
_Z4scpyPhS_:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r0, [fp, #-16]
	ldr	r1, [fp, #-20]
	bl	strcpy
	mov	r3, r0
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z8findwordPh
_Z8findwordPh:
	@ args = 0, pretend = 0, frame = 116
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #116
	str	r0, [fp, #-16]
	mov	r3, #0
	str	r3, [fp, #-124]
L52:
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-124]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L55
	b	L53
L55:
	mvn	r2, #107
	ldr	r3, [fp, #-124]
	sub	r1, fp, #12
	add	r3, r1, r3
	add	r1, r3, r2
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-124]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]
	strb	r3, [r1, #0]
	ldr	r3, [fp, #-124]
	add	r3, r3, #1
	str	r3, [fp, #-124]
	b	L52
L53:
	mvn	r2, #107
	ldr	r3, [fp, #-124]
	sub	r1, fp, #12
	add	r3, r1, r3
	add	r2, r3, r2
	mov	r3, #0
	strb	r3, [r2, #0]
	ldr	r3, L61
	ldr	r3, [r3, #4]
	str	r3, [fp, #-20]
L56:
	ldr	r3, [fp, #-20]
	cmp	r3, #0
	bne	L59
	mov	r3, #0
	str	r3, [fp, #-128]
	b	L51
L59:
	ldr	r3, [fp, #-20]
	ldr	r0, [fp, #-16]
	ldr	r1, [r3, #16]
	bl	_Z4scmpPhS_
	mov	r3, r0
	cmp	r3, #0
	bne	L60
	ldr	r3, [fp, #-20]
	str	r3, [fp, #-128]
	b	L51
L60:
	ldr	r3, [fp, #-20]
	ldr	r3, [r3, #0]
	str	r3, [fp, #-20]
	b	L56
L51:
	ldr	r0, [fp, #-128]
	ldmea	fp, {fp, sp, pc}
L62:
	.align	0
L61:
	.word	sva
	.section .rdata
	.align	0
LC5:
	.ascii	"UNDEFINED\000"
	.align	0
LC6:
	.ascii	"Dictionary overflow\n\000"
	.text
	.align	0
	.global	_Z10createwordPh
_Z10createwordPh:
	@ args = 0, pretend = 0, frame = 116
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #116
	str	r0, [fp, #-24]
	ldr	r3, L67
	ldr	r2, [r3, #0]
	ldr	r3, L67+4
	ldr	r3, [r3, #4]
	str	r3, [r2, #0]
	ldr	r0, L67+8
	bl	_Z8findwordPh
	mov	r3, r0
	str	r3, [fp, #-32]
	ldr	r3, [fp, #-32]
	cmp	r3, #0
	bne	L64
	ldr	r3, L67
	ldr	r2, [r3, #0]
	mov	r3, #0
	str	r3, [r2, #4]
	ldr	r3, L67
	ldr	r2, [r3, #0]
	ldr	r3, L67+12
	ldr	r3, [r3, #0]
	str	r3, [r2, #8]
	b	L65
L64:
	ldr	r3, L67
	ldr	r2, [r3, #0]
	ldr	r3, [fp, #-32]
	ldr	r3, [r3, #4]
	str	r3, [r2, #4]
	ldr	r3, L67
	mov	r2, #8
	ldr	r3, [r3, #0]
	add	r1, r2, r3
	mov	r2, #8
	ldr	r3, [fp, #-32]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	str	r3, [r1, #0]
L65:
	ldr	r3, L67
	ldr	r2, [r3, #0]
	ldr	r3, L67
	ldr	r3, [r3, #0]
	add	r3, r3, #20
	str	r3, [r2, #16]
	ldr	r3, L67
	ldr	r3, [r3, #0]
	add	r3, r3, #20
	mov	r0, r3
	ldr	r1, [fp, #-24]
	bl	_Z4scpyPhS_
	ldr	r2, L67+4
	ldr	r3, L67
	ldr	r3, [r3, #0]
	str	r3, [r2, #4]
	ldr	r4, L67
	ldr	r5, L67
	ldr	r0, [fp, #-24]
	bl	_Z4slenPh
	mov	r2, r0
	ldr	r3, [r5, #0]
	add	r3, r2, r3
	add	r3, r3, #25
	str	r3, [r4, #0]
	ldr	r1, L67
	ldr	r3, L67
	ldr	r3, [r3, #0]
	add	r2, r3, #3
	mov	r3, r2, asr #31
	mov	r3, r3, lsr #30
	add	r3, r2, r3
	mov	r3, r3, asr #2
	mov	r3, r3, asl #2
	str	r3, [r1, #0]
	ldr	r3, L67
	ldr	r2, [r3, #0]
	ldr	r3, L67+16
	cmp	r2, r3
	bcc	L66
	ldr	r0, L67+20
	bl	printf
	mov	r0, #0
	bl	exit
L66:
	ldr	r3, L67+4
	ldr	r3, [r3, #4]
	mov	r0, r3
	ldmea	fp, {r4, r5, fp, sp, pc}
L68:
	.align	0
L67:
	.word	freedic
	.word	sva
	.word	LC5
	.word	freespace
	.word	dic+4000
	.word	LC6
	.align	0
	.global	_Z10getwordstrPh
_Z10getwordstrPh:
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #48
	str	r0, [fp, #-16]
	mov	r3, #0
	str	r3, [fp, #-56]
L70:
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-56]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L73
	b	L71
L73:
	mvn	r2, #39
	ldr	r3, [fp, #-56]
	sub	r1, fp, #12
	add	r3, r1, r3
	add	r1, r3, r2
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-56]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]
	strb	r3, [r1, #0]
	ldr	r3, [fp, #-56]
	add	r3, r3, #1
	str	r3, [fp, #-56]
	b	L70
L71:
	mvn	r2, #39
	ldr	r3, [fp, #-56]
	sub	r1, fp, #12
	add	r3, r1, r3
	add	r2, r3, r2
	mov	r3, #0
	strb	r3, [r2, #0]
	ldr	r0, [fp, #-16]
	bl	_Z8findwordPh
	mov	r3, r0
	str	r3, [fp, #-20]
	ldr	r3, [fp, #-20]
	cmp	r3, #0
	beq	L74
	ldr	r3, L75
	ldr	r2, [fp, #-20]
	str	r2, [r3, #0]
	ldr	r3, [fp, #-20]
	str	r3, [fp, #-60]
	b	L69
L74:
	ldr	r0, [fp, #-16]
	bl	_Z10createwordPh
	mov	r3, r0
	str	r3, [fp, #-20]
	ldr	r2, L75
	ldr	r3, [fp, #-20]
	str	r3, [r2, #0]
	ldr	r3, [fp, #-20]
	str	r3, [fp, #-60]
L69:
	ldr	r0, [fp, #-60]
	ldmea	fp, {fp, sp, pc}
L76:
	.align	0
L75:
	.word	gpw
	.align	0
	.global	_Z7getwordv
_Z7getwordv:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	bl	_Z8readwordv
	ldr	r0, L78
	bl	_Z10getwordstrPh
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L79:
	.align	0
L78:
	.word	wr
	.align	0
	.global	_Z9f_getcharv
_Z9f_getcharv:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	ldr	r3, L81
	ldr	r3, [r3, #0]
	mov	lr, pc
	mov	pc, r3
	mov	r3, r0
	and	r3, r3, #255
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L82:
	.align	0
L81:
	.word	pgetchr
	.align	0
	.global	_Z9f_putchari
_Z9f_putchari:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, [fp, #-16]
	bl	putchar
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z7f_printi
_Z7f_printi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, L85
	ldr	r1, [fp, #-16]
	bl	printf
	ldmea	fp, {fp, sp, pc}
L86:
	.align	0
L85:
	.word	LC1
	.section .rdata
	.align	0
LC7:
	.ascii	"%X\000"
	.text
	.align	0
	.global	_Z9f_scanhexv
_Z9f_scanhexv:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	mov	r3, #0
	str	r3, [fp, #-16]
	ldr	r3, L88
	sub	r2, fp, #16
	ldr	r0, [r3, #0]
	ldr	r1, L88+4
	bl	fscanf
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L89:
	.align	0
L88:
	.word	cvmin
	.word	LC7
	.align	0
	.global	_Z10f_printhexi
_Z10f_printhexi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, L91
	ldr	r1, [fp, #-16]
	bl	printf
	ldmea	fp, {fp, sp, pc}
L92:
	.align	0
L91:
	.word	LC1
	.section .rdata
	.align	0
LC8:
	.ascii	"\n"
	.ascii	"stack overflow\n\000"
	.align	0
LC9:
	.ascii	"\n"
	.ascii	"stack underflow\n\000"
	.align	0
LC10:
	.ascii	"Instruction %X not implemented\n\000"
	.text
	.align	0
	.global	_Z7interp1v
_Z7interp1v:
	@ args = 0, pretend = 0, frame = 28
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #28
	ldr	r3, L223
	str	r3, [fp, #-20]
	ldr	r2, L223+4
	mov	r3, #0
	str	r3, [r2, #0]
L94:
	sub	r1, fp, #20
	ldr	r2, [r1, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [fp, #-24]
	add	r2, r2, #4
	str	r2, [r1, #0]
	ldr	r2, [fp, #-24]
	ldr	r3, L223+8
	cmp	r2, r3
	bne	L97
	ldr	r1, L223+12
	sub	r0, fp, #20
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L94
L97:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+16
	cmp	r2, r3
	bne	L99
	ldr	r1, L223+12
	sub	r0, fp, #20
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #4]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L94
L99:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+20
	cmp	r2, r3
	bne	L101
	ldr	r1, L223+12
	sub	r0, fp, #20
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #40]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L94
L101:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+24
	cmp	r2, r3
	bne	L103
	ldr	r3, L223+12
	add	r0, r3, #48
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L223+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, L223+12
	add	r1, r3, #48
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	b	L94
L103:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+28
	cmp	r2, r3
	bne	L105
	ldr	r3, L223+12
	add	r0, r3, #48
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L223+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, L223+12
	add	r1, r3, #48
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	b	L94
L105:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+32
	cmp	r2, r3
	bne	L107
	ldr	r3, L223+12
	add	r0, r3, #48
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L223+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, L223+12
	add	r1, r3, #48
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	b	L94
L107:
	ldr	r3, [fp, #-24]
	bic	r3, r3, #3840
	bic	r3, r3, #15
	cmp	r3, #65536
	bne	L109
	ldr	r3, [fp, #-24]
	and	r3, r3, #65280
	mov	r3, r3, asr #8
	str	r3, [fp, #-40]
	ldr	r3, [fp, #-24]
	and	r3, r3, #255
	str	r3, [fp, #-44]
	ldr	r3, [fp, #-40]
	mov	r2, r3, asl #2
	ldr	r3, L223+12
	add	r1, r2, r3
	ldr	r3, [fp, #-44]
	mov	r2, r3, asl #2
	ldr	r3, L223+12
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	str	r3, [r1, #0]
	b	L94
L109:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+36
	cmp	r2, r3
	bne	L111
	ldr	r3, L223+40
	ldr	r2, L223+12
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L111:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+44
	cmp	r2, r3
	bne	L113
	ldr	r3, L223+48
	ldr	r2, L223+12
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L113:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+52
	cmp	r2, r3
	bne	L115
	ldr	r3, L223+12
	ldr	r2, L223+48
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L115:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+56
	cmp	r2, r3
	bne	L117
	ldr	r3, L223+40
	ldr	r2, L223+48
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L117:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+60
	cmp	r2, r3
	bne	L119
	ldr	r3, L223+12
	add	r0, r3, #48
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L223+36
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L94
L119:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+64
	cmp	r2, r3
	bne	L121
	ldr	r3, L223+68
	ldr	r2, L223+12
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L121:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+72
	cmp	r2, r3
	bne	L123
	ldr	r3, L223+76
	ldr	r2, L223+12
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L123:
	ldr	r3, [fp, #-24]
	cmp	r3, #68608
	bne	L125
	ldr	r3, L223+80
	ldr	r2, L223+12
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L125:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+84
	cmp	r2, r3
	bne	L127
	ldr	r3, L223+12
	ldr	r2, L223+68
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L127:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+88
	cmp	r2, r3
	bne	L129
	ldr	r3, L223+12
	ldr	r2, L223+76
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L129:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+92
	cmp	r2, r3
	bne	L131
	ldr	r3, L223+12
	ldr	r2, L223+80
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L131:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+96
	cmp	r2, r3
	bne	L133
	ldr	r3, L223+68
	ldr	r2, L223+40
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L133:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+100
	cmp	r2, r3
	bne	L135
	ldr	r3, L223+80
	ldr	r2, L223+40
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L135:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+104
	cmp	r2, r3
	bne	L137
	ldr	r3, L223+80
	ldr	r2, L223+68
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L137:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+108
	cmp	r2, r3
	bne	L139
	ldr	r3, L223+40
	ldr	r2, L223+80
	ldr	r2, [r2, #0]
	str	r2, [r3, #0]
	b	L94
L139:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+112
	cmp	r2, r3
	bne	L141
	ldr	r2, L223+12
	ldr	r3, L223+12
	ldr	r3, [r3, #40]
	ldr	r3, [r3, #0]
	str	r3, [r2, #0]
	b	L94
L141:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+116
	cmp	r2, r3
	bne	L143
	ldr	r2, L223+12
	ldr	r3, L223+12
	ldr	r3, [r3, #40]
	ldr	r3, [r3, #0]
	str	r3, [r2, #40]
	b	L94
L143:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+120
	cmp	r2, r3
	bne	L145
	ldr	r3, L223+12
	ldr	r2, [r3, #40]
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	str	r3, [r2, #0]
	b	L94
L145:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+124
	cmp	r2, r3
	bne	L147
	ldr	r1, L223+12
	ldr	r0, L223+12
	ldr	r3, [fp, #-20]
	ldr	r2, [r3, #0]
	mov	r3, r2, asr #31
	mov	r3, r3, lsr #30
	add	r3, r2, r3
	mov	r3, r3, asr #2
	mov	r2, r3, asl #2
	ldr	r3, [r0, #40]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	str	r3, [r1, #0]
	ldr	r3, [fp, #-20]
	add	r3, r3, #4
	str	r3, [fp, #-20]
	b	L94
L147:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+128
	cmp	r2, r3
	bne	L149
	ldr	r1, L223+12
	sub	r0, fp, #20
	ldr	ip, [r0, #0]
	mov	r3, ip
	ldr	r2, [r3, #0]
	mov	r3, r2, asr #31
	mov	r3, r3, lsr #30
	add	r3, r2, r3
	mov	r3, r3, asr #2
	mov	r2, r3, asl #2
	ldr	r3, [r1, #40]
	add	r2, r2, r3
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	str	r3, [r2, #0]
	add	ip, ip, #4
	str	ip, [r0, #0]
	b	L94
L149:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+132
	cmp	r2, r3
	bne	L151
	ldr	r1, L223+12
	ldr	r3, L223+12
	add	r0, r3, #44
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L94
L151:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+136
	cmp	r2, r3
	bne	L153
	ldr	r2, L223+12
	ldr	r3, L223+12
	ldr	r3, [r3, #44]
	sub	r3, r3, #4
	str	r3, [r2, #44]
	mov	r2, r3
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	str	r3, [r2, #0]
	b	L94
L153:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+140
	cmp	r2, r3
	bne	L155
	ldr	r1, L223+12
	ldr	r3, L223+12
	add	r0, r3, #44
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #4]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L94
L155:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+144
	cmp	r2, r3
	bne	L157
	ldr	r1, L223+12
	ldr	r3, L223+12
	add	r0, r3, #44
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #40]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L94
L157:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+148
	cmp	r2, r3
	bne	L159
	ldr	r2, L223+12
	ldr	r3, L223+12
	ldr	r3, [r3, #44]
	sub	r3, r3, #4
	str	r3, [r2, #44]
	mov	r2, r3
	ldr	r3, L223+12
	ldr	r3, [r3, #4]
	str	r3, [r2, #0]
	b	L94
L159:
	ldr	r3, [fp, #-24]
	cmp	r3, #89088
	bne	L161
	ldr	r3, L223+12
	add	r1, r3, #48
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	b	L94
L161:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+152
	cmp	r2, r3
	bne	L163
	ldr	r0, L223+12
	ldr	r3, L223+12
	ldr	r2, L223+12
	ldr	r1, [r3, #0]
	ldr	r3, [r2, #4]
	add	r3, r1, r3
	str	r3, [r0, #0]
	b	L94
L163:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+156
	cmp	r2, r3
	bne	L165
	ldr	r0, L223+12
	ldr	r3, L223+12
	ldr	r2, L223+12
	ldr	r1, [r3, #0]
	ldr	r3, [r2, #4]
	rsb	r3, r3, r1
	str	r3, [r0, #0]
	b	L94
L165:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+160
	cmp	r2, r3
	bne	L167
	sub	r1, fp, #20
	ldr	r3, [r1, #0]
	mov	r2, r3
	ldr	r2, [r2, #0]
	str	r2, [fp, #-28]
	add	r3, r3, #4
	str	r3, [r1, #0]
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	blt	L94
	ldr	r3, [fp, #-28]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-20]
	add	r3, r3, r2
	str	r3, [fp, #-20]
	b	L94
L167:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+164
	cmp	r2, r3
	bne	L170
	sub	r1, fp, #20
	ldr	r3, [r1, #0]
	mov	r2, r3
	ldr	r2, [r2, #0]
	str	r2, [fp, #-28]
	add	r3, r3, #4
	str	r3, [r1, #0]
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L94
	ldr	r3, [fp, #-28]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-20]
	add	r3, r3, r2
	str	r3, [fp, #-20]
	b	L94
L170:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+168
	cmp	r2, r3
	bne	L173
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	blt	L94
	ldr	r3, L223+12
	ldr	r3, [r3, #40]
	str	r3, [fp, #-20]
	b	L94
L173:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+172
	cmp	r2, r3
	bne	L176
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L94
	ldr	r3, L223+12
	ldr	r3, [r3, #40]
	str	r3, [fp, #-20]
	b	L94
L176:
	ldr	r3, [fp, #-24]
	cmp	r3, #1310720
	bne	L179
	ldr	r3, L223+12
	ldr	r2, L223+12
	ldr	r1, [r3, #0]
	ldr	r3, [r2, #40]
	rsb	r3, r3, r1
	mov	r3, r3, asr #2
	sub	r3, r3, #2
	str	r3, [fp, #-44]
	ldr	r3, L223+12
	mov	r2, #4
	ldr	r3, [r3, #40]
	add	r2, r2, r3
	ldr	r3, [fp, #-44]
	str	r3, [r2, #0]
	b	L94
L179:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+176
	cmp	r2, r3
	bne	L181
	ldr	r3, L223+4
	ldr	r2, [r3, #0]
	ldr	r3, L223+180
	cmp	r2, r3
	ble	L182
	ldr	r0, L223+184
	bl	printf
	b	L93
L182:
	sub	r1, fp, #20
	ldr	r3, [r1, #0]
	mov	r2, r3
	ldr	r2, [r2, #0]
	str	r2, [fp, #-28]
	add	r3, r3, #4
	str	r3, [r1, #0]
	ldr	r0, L223+188
	ldr	ip, L223+4
	ldr	r2, [ip, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, [fp, #-20]
	str	r3, [r0, r1, asl #2]
	add	r2, r2, #1
	str	r2, [ip, #0]
	ldr	r3, [fp, #-28]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-20]
	add	r3, r3, r2
	str	r3, [fp, #-20]
	b	L94
L181:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+192
	cmp	r2, r3
	bne	L184
	ldr	r3, L223+4
	ldr	r2, [r3, #0]
	ldr	r3, L223+180
	cmp	r2, r3
	ble	L185
	ldr	r0, L223+184
	bl	printf
	b	L93
L185:
	ldr	r0, L223+188
	ldr	ip, L223+4
	ldr	r2, [ip, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, [fp, #-20]
	str	r3, [r0, r1, asl #2]
	add	r2, r2, #1
	str	r2, [ip, #0]
	ldr	r3, L223+12
	ldr	r3, [r3, #40]
	str	r3, [fp, #-20]
	b	L94
L184:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+196
	cmp	r2, r3
	bne	L187
	b	L94
L187:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+200
	cmp	r2, r3
	beq	L190
	ldr	r2, [fp, #-24]
	ldr	r3, L223+204
	cmp	r2, r3
	beq	L190
	b	L189
L190:
	ldr	r3, L223+4
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bgt	L191
	ldr	r0, L223+208
	bl	printf
	b	L93
L191:
	ldr	r2, L223+188
	ldr	r1, L223+4
	ldr	r3, L223+4
	ldr	r3, [r3, #0]
	sub	r3, r3, #1
	str	r3, [r1, #0]
	ldr	r3, [r2, r3, asl #2]
	str	r3, [fp, #-20]
	b	L94
L189:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+212
	cmp	r2, r3
	bne	L193
	ldr	r2, L223+12
	ldr	r3, L223+12
	ldr	r3, [r3, #0]
	mov	r3, r3, asr #1
	str	r3, [r2, #0]
	b	L94
L193:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+216
	cmp	r2, r3
	bne	L195
	ldr	r0, L223+12
	ldr	r3, L223+12
	ldr	r2, L223+12
	ldr	r1, [r3, #0]
	ldr	r3, [r2, #4]
	and	r3, r1, r3
	str	r3, [r0, #0]
	b	L94
L195:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+220
	cmp	r2, r3
	bne	L197
	ldr	r0, L223+12
	ldr	r3, L223+12
	ldr	r2, L223+12
	ldr	r1, [r3, #0]
	ldr	r3, [r2, #4]
	eor	r3, r1, r3
	str	r3, [r0, #0]
	b	L94
L197:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+224
	cmp	r2, r3
	bne	L199
	sub	r1, fp, #20
	ldr	r2, [r1, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [fp, #-32]
	add	r2, r2, #4
	str	r2, [r1, #0]
	ldr	r3, [fp, #-32]
	mov	lr, pc
	mov	pc, r3
	b	L94
L199:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+228
	cmp	r2, r3
	bne	L201
	ldr	r3, L223+68
	ldr	r3, [r3, #0]
	mov	lr, pc
	mov	pc, r3
	b	L94
L201:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+232
	cmp	r2, r3
	bne	L203
	ldr	r4, L223+12
	bl	getchar
	str	r0, [r4, #0]
	b	L94
L203:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+236
	cmp	r2, r3
	bne	L205
	ldr	r3, L223+12
	ldr	r0, [r3, #0]
	bl	putchar
	b	L94
L205:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+240
	cmp	r2, r3
	bne	L207
	ldr	r4, L223+12
	bl	_Z7getwordv
	str	r0, [r4, #40]
	ldr	r2, L223+12
	mov	r3, #0
	str	r3, [r2, #0]
	ldr	r0, L223+244
	ldr	r1, L223+248
	ldr	r2, L223+12
	bl	sscanf
	b	L94
L207:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+252
	cmp	r2, r3
	bne	L209
	ldr	r4, L223+12
	bl	_Z9f_scanhexv
	str	r0, [r4, #0]
	b	L94
L209:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+256
	cmp	r2, r3
	bne	L211
	ldr	r3, L223+12
	ldr	r0, [r3, #0]
	bl	_Z10f_printhexi
	b	L94
L211:
	ldr	r3, [fp, #-24]
	cmp	r3, #917504
	bne	L213
	sub	r1, fp, #20
	ldr	r3, [r1, #0]
	mov	r2, r3
	ldr	r2, [r2, #0]
	str	r2, [fp, #-44]
	add	r3, r3, #4
	str	r3, [r1, #0]
	mov	r3, #0
	str	r3, [fp, #-40]
L214:
	ldr	r2, [fp, #-40]
	ldr	r3, [fp, #-44]
	cmp	r2, r3
	blt	L217
	b	L94
L217:
	ldr	r3, L223+12
	add	r1, r3, #48
	ldr	r0, [r1, #0]
	mov	r3, r0
	mov	ip, r3
	sub	lr, fp, #20
	ldr	r2, [lr, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [ip, #0]
	add	r2, r2, #4
	str	r2, [lr, #0]
	add	r0, r0, #4
	str	r0, [r1, #0]
	ldr	r3, [fp, #-40]
	add	r3, r3, #1
	str	r3, [fp, #-40]
	b	L214
L213:
	ldr	r2, [fp, #-24]
	ldr	r3, L223+260
	cmp	r2, r3
	bne	L219
	bl	_Z7dmpcodev
	b	L94
L219:
	ldr	r2, [fp, #-24]
	mvn	r3, #-16777216
	cmp	r2, r3
	bne	L221
	ldr	r3, L223+12
	ldr	r0, [r3, #0]
	bl	exit
L221:
	ldr	r0, L223+264
	ldr	r1, [fp, #-24]
	bl	printf
	b	L94
L93:
	ldmea	fp, {r4, fp, sp, pc}
L224:
	.align	0
L223:
	.word	cod
	.word	sp
	.word	2162703
	.word	reg
	.word	65807
	.word	2165263
	.word	16842767
	.word	16843023
	.word	16845327
	.word	65792
	.word	reg+4
	.word	66048
	.word	reg+8
	.word	65538
	.word	65794
	.word	16843008
	.word	68096
	.word	reg+40
	.word	68352
	.word	reg+44
	.word	reg+48
	.word	65546
	.word	65547
	.word	65548
	.word	68097
	.word	68609
	.word	68618
	.word	65804
	.word	65562
	.word	68122
	.word	72192
	.word	65690
	.word	104960
	.word	65627
	.word	80640
	.word	65883
	.word	68187
	.word	80641
	.word	131073
	.word	196609
	.word	798719
	.word	802815
	.word	789247
	.word	789503
	.word	864255
	.word	999
	.word	LC8
	.word	stack
	.word	854783
	.word	917505
	.word	983039
	.word	917506
	.word	LC9
	.word	459007
	.word	524289
	.word	589825
	.word	1048335
	.word	1048330
	.word	1048831
	.word	1179392
	.word	1245439
	.word	awr
	.word	LC2
	.word	1179903
	.word	1441536
	.word	1507327
	.word	LC10
	.align	0
	.global	_Z5isdgtc
_Z5isdgtc:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	mov	r3, r0
	strb	r3, [fp, #-13]
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	cmp	r3, #47
	bls	L226
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	cmp	r3, #57
	bhi	L226
	mov	r3, #1
	str	r3, [fp, #-20]
	b	L225
L226:
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	cmp	r3, #64
	bls	L227
	ldrb	r3, [fp, #-13]	@ zero_extendqisi2
	cmp	r3, #70
	bhi	L227
	mov	r3, #1
	str	r3, [fp, #-20]
	b	L225
L227:
	mov	r3, #0
	str	r3, [fp, #-20]
L225:
	ldr	r0, [fp, #-20]
	ldmea	fp, {fp, sp, pc}
	.section .rdata
	.align	0
LC11:
	.ascii	"%s\000"
	.align	0
LC12:
	.ascii	"Too much labels\n\000"
	.align	0
LC13:
	.ascii	"%s:\n\000"
	.align	0
LC14:
	.ascii	"align\000"
	.align	0
LC15:
	.ascii	" align %d\n\000"
	.align	0
LC16:
	.ascii	" .align %d\n\000"
	.align	0
LC17:
	.ascii	"res\000"
	.align	0
LC18:
	.ascii	" db 0%Xh dup (0)\n\000"
	.align	0
LC19:
	.ascii	" .space 0x%X, 0\n\000"
	.align	0
LC20:
	.ascii	"db\000"
	.align	0
LC21:
	.ascii	" db 0%Xh\n\000"
	.align	0
LC22:
	.ascii	"dw\000"
	.align	0
LC23:
	.ascii	" dw 0%Xh\n\000"
	.align	0
LC24:
	.ascii	"r=\000"
	.align	0
LC26:
	.ascii	"r=sva\000"
	.align	0
LC27:
	.ascii	"coder={r}\000"
	.align	0
LC28:
	.ascii	"r=r\000"
	.align	0
LC29:
	.ascii	"'r=r\000"
	.align	0
LC30:
	.ascii	"r=[r]\000"
	.align	0
LC31:
	.ascii	"r=byte[r]\000"
	.align	0
LC32:
	.ascii	"[r]=r\000"
	.align	0
LC33:
	.ascii	"byte[r]=r\000"
	.align	0
LC34:
	.ascii	"r=[r+]\000"
	.align	0
LC35:
	.ascii	"[r+]=r\000"
	.align	0
LC36:
	.ascii	"r=[r++]\000"
	.align	0
LC37:
	.ascii	"[--r]=r\000"
	.align	0
LC38:
	.ascii	"[r++]=r\000"
	.align	0
LC39:
	.ascii	"r=r+r\000"
	.align	0
LC40:
	.ascii	"r=r-r\000"
	.align	0
LC41:
	.ascii	"asrr\000"
	.align	0
LC42:
	.ascii	"r=r&r\000"
	.align	0
LC43:
	.ascii	"r=r^r\000"
	.align	0
LC44:
	.ascii	"bp\000"
	.align	0
LC45:
	.ascii	"bz\000"
	.align	0
LC46:
	.ascii	"bpr\000"
	.align	0
LC47:
	.ascii	"bzr\000"
	.align	0
LC48:
	.ascii	"call\000"
	.align	0
LC49:
	.ascii	"callr\000"
	.align	0
LC50:
	.ascii	"callextr\000"
	.align	0
LC51:
	.ascii	"beginf\000"
	.align	0
LC52:
	.ascii	"endf\000"
	.align	0
LC53:
	.ascii	"ret\000"
	.align	0
LC54:
	.ascii	"getchar\000"
	.align	0
LC55:
	.ascii	"intbios\000"
	.align	0
LC56:
	.ascii	"putchar\000"
	.align	0
LC57:
	.ascii	"scanhex\000"
	.align	0
LC58:
	.ascii	"printhex\000"
	.align	0
LC59:
	.ascii	"getword\000"
	.align	0
LC60:
	.ascii	"fopen\000"
	.align	0
LC61:
	.ascii	"fclose\000"
	.align	0
LC62:
	.ascii	"fgetc\000"
	.align	0
LC63:
	.ascii	"fputc\000"
	.align	0
LC64:
	.ascii	"getprocadr\000"
	.align	0
LC65:
	.ascii	"code\000"
	.align	0
LC66:
	.ascii	"endcode\000"
	.align	0
LC67:
	.ascii	"setbradr\000"
	.align	0
LC68:
	.ascii	"dumpcode\000"
	.align	0
LC69:
	.ascii	"calldummy\000"
	.align	0
LC70:
	.ascii	"dummyprint\000"
	.align	0
LC71:
	.ascii	"initcvm\000"
	.align	0
LC72:
	.ascii	"sscandec\000"
	.align	0
LC73:
	.ascii	"printdec\000"
	.align	0
LC74:
	.ascii	"exit\000"
	.align	0
LC75:
	.ascii	"\000"
	.align	0
LC25:
	.ascii	"Invalid instruction <%s>\n\000"
	.align	0
LC76:
	.ascii	"Code overflow\n\000"
	.text
	.align	0
	.global	_Z10compile_opPiPciPlPA200_cS0_
_Z10compile_opPiPciPlPA200_cS0_:
	@ args = 8, pretend = 0, frame = 336
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #336
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	str	r2, [fp, #-24]
	str	r3, [fp, #-28]
	ldr	r3, [fp, #-20]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #58
	bne	L229
	ldr	r1, L417
	mov	r2, #1
	ldr	r3, [fp, #-20]
	add	r3, r2, r3
	ldrb	r2, [r3, #0]	@ zero_extendqisi2
	ldr	r3, [fp, #-16]
	str	r3, [r1, r2, asl #2]
	ldr	r3, [fp, #-20]
	add	r3, r3, #1
	sub	r2, fp, #344
	mov	r0, r3
	ldr	r1, L417+4
	bl	sscanf
	ldr	r3, L417+8
	ldr	r2, [r3, #0]
	mov	r3, r2
	mov	r3, r3, asl #3
	add	r3, r3, r2
	mov	r2, r3, asl #2
	ldr	r3, L417+12
	add	r3, r2, r3
	sub	r2, fp, #344
	mov	r0, r3
	mov	r1, r2
	bl	strcpy
	ldr	r2, L417+12
	ldr	r3, L417+8
	ldr	r1, [r3, #0]
	mov	r0, #32
	mov	r3, r1
	mov	r3, r3, asl #3
	add	r3, r3, r1
	mov	r3, r3, asl #2
	add	r3, r3, r2
	add	r2, r3, r0
	ldr	r3, [fp, #-16]
	str	r3, [r2, #0]
	ldr	r2, L417+8
	ldr	r3, L417+8
	ldr	r3, [r3, #0]
	add	r3, r3, #1
	str	r3, [r2, #0]
	ldr	r3, L417+8
	ldr	r3, [r3, #0]
	cmp	r3, #255
	ble	L230
	ldr	r0, L417+16
	bl	printf
	mov	r0, #0
	bl	exit
L230:
	ldr	r3, L417+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L231
	ldr	r3, L417+20
	sub	r2, fp, #344
	ldr	r0, [r3, #0]
	ldr	r1, L417+24
	bl	fprintf
L231:
	ldr	r3, L417+28
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L232
	ldr	r3, L417+28
	sub	r2, fp, #344
	ldr	r0, [r3, #0]
	ldr	r1, L417+24
	bl	fprintf
L232:
	ldr	r3, L417+32
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L233
	ldr	r3, L417+32
	sub	r2, fp, #344
	ldr	r0, [r3, #0]
	ldr	r1, L417+24
	bl	fprintf
L233:
	ldr	r3, L417+36
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L235
	ldr	r3, L417+36
	sub	r2, fp, #344
	ldr	r0, [r3, #0]
	ldr	r1, L417+24
	bl	fprintf
	b	L235
L229:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+40
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L236
	ldr	r3, L417+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L237
	ldr	r3, L417+20
	ldr	r2, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L417+44
	ldr	r2, [r2, #0]
	bl	fprintf
L237:
	ldr	r3, L417+28
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L238
	ldr	r3, L417+28
	ldr	r2, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L417+48
	ldr	r2, [r2, #0]
	bl	fprintf
L238:
	ldr	r3, L417+32
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L239
	ldr	r3, L417+32
	ldr	r2, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L417+48
	ldr	r2, [r2, #0]
	bl	fprintf
L239:
	ldr	r3, L417+36
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L240
	ldr	r3, L417+36
	ldr	r2, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L417+48
	ldr	r2, [r2, #0]
	bl	fprintf
L240:
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-44]
	ldr	r3, [fp, #-28]
	ldr	r2, [fp, #-44]
	ldr	r3, [r3, #0]
	add	r3, r2, r3
	sub	r3, r3, #1
	ldr	r2, [fp, #-28]
	mov	r0, r3
	ldr	r1, [r2, #0]
	bl	__divsi3
	mov	r2, r0
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	mul	r3, r2, r3
	str	r3, [fp, #-44]
	ldr	r3, [fp, #-44]
	add	r3, r3, #3
	mov	r3, r3, lsr #2
	mov	r3, r3, asl #2
	str	r3, [fp, #-44]
	ldr	r3, [fp, #-44]
	str	r3, [fp, #-348]
	b	L228
L236:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+52
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L242
	ldr	r3, L417+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L243
	ldr	r3, L417+20
	ldr	r2, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L417+56
	ldr	r2, [r2, #0]
	bl	fprintf
L243:
	ldr	r3, L417+28
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L244
	ldr	r3, L417+28
	ldr	r2, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L417+60
	ldr	r2, [r2, #0]
	bl	fprintf
L244:
	ldr	r3, L417+32
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L245
	ldr	r3, L417+32
	ldr	r2, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L417+60
	ldr	r2, [r2, #0]
	bl	fprintf
L245:
	ldr	r3, L417+36
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L246
	ldr	r3, L417+36
	ldr	r2, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L417+60
	ldr	r2, [r2, #0]
	bl	fprintf
L246:
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-44]
	ldr	r3, [fp, #-28]
	ldr	r2, [fp, #-44]
	ldr	r3, [r3, #0]
	add	r3, r2, r3
	str	r3, [fp, #-44]
	ldr	r3, [fp, #-44]
	str	r3, [fp, #-348]
	b	L228
L242:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+64
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L248
	ldr	r3, L417+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L249
	ldr	r3, L417+20
	ldr	r2, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L417+68
	ldr	r2, [r2, #0]
	bl	fprintf
L249:
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-44]
	sub	r1, fp, #44
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, [fp, #-28]
	ldrb	r3, [r3, #0]
	strb	r3, [r0, #0]
	add	r2, r2, #1
	str	r2, [r1, #0]
	ldr	r3, [fp, #-44]
	str	r3, [fp, #-348]
	b	L228
L248:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+72
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L251
	ldr	r3, L417+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L252
	ldr	r3, L417+20
	ldr	r2, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L417+76
	ldr	r2, [r2, #0]
	bl	fprintf
L252:
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-44]
	sub	r1, fp, #44
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	ldr	r3, [fp, #-44]
	str	r3, [fp, #-348]
	b	L228
L251:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+80
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L254
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L255
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r2, r2, r3
	ldr	r3, [fp, #4]
	add	r3, r3, #200
	ldr	r0, [fp, #-16]
	ldr	r1, [r2, #0]
	mov	r2, r3
	bl	_Z11c_mov_r0_imPilPc
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L255:
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #1
	bne	L257
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r2, r2, r3
	ldr	r3, [fp, #4]
	add	r3, r3, #200
	ldr	r0, [fp, #-16]
	ldr	r1, [r2, #0]
	mov	r2, r3
	bl	_Z11c_mov_r1_imPilPc
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L257:
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L259
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r2, r2, r3
	ldr	r3, [fp, #4]
	add	r3, r3, #200
	ldr	r0, [fp, #-16]
	ldr	r1, [r2, #0]
	mov	r2, r3
	bl	_Z11c_mov_ra_imPilPc
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L259:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L254:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+84
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L262
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L263
	ldr	r0, [fp, #-16]
	bl	_Z12c_mov_ra_svaPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L263:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L262:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+88
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L266
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L267
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L267
	ldr	r0, [fp, #-16]
	bl	_Z15c_q_mov_r0_imr0Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L267:
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #1
	bne	L269
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L269
	ldr	r0, [fp, #-16]
	bl	_Z15c_q_mov_r1_imr0Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L269:
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L271
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L271
	ldr	r0, [fp, #-16]
	bl	_Z15c_q_mov_ra_imr0Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L271:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L266:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+92
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L274
	ldr	r1, [fp, #-28]
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r0, [fp, #-16]
	ldr	r1, [r1, #0]
	ldr	r2, [r3, #0]
	bl	_Z9c_mov_r_rPiii
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L274:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+96
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L276
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #1
	bne	L277
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L277
	ldr	r0, [fp, #-16]
	bl	_Z13c_q_mov_r1_r0Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L277:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L276:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+100
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L280
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L281
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L281
	ldr	r0, [fp, #-16]
	bl	_Z16c_mov_r0_cont_raPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L281:
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L283
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L283
	ldr	r0, [fp, #-16]
	bl	_Z16c_mov_ra_cont_raPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L283:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L280:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+104
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L286
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L287
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L287
	ldr	r0, [fp, #-16]
	bl	_Z21c_mov_r0_byte_cont_raPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L287:
	ldr	r0, L417+284
	bl	printf
	b	L235
L286:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+108
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L290
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L291
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L291
	ldr	r0, [fp, #-16]
	bl	_Z16c_mov_cont_ra_r0Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L291:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L290:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+112
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L294
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L295
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L295
	ldr	r0, [fp, #-16]
	bl	_Z21c_mov_byte_cont_ra_r0Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L295:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L294:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+116
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L298
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L299
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L299
	mov	r2, #8
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r0, [fp, #-16]
	ldr	r1, [r3, #0]
	bl	_Z24c_mov_r0_cont_ra_plus_imPii
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L299:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L298:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+120
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L302
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L303
	mov	r2, #8
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L303
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r0, [fp, #-16]
	ldr	r1, [r3, #0]
	bl	_Z24c_mov_cont_ra_plus_im_r0Pii
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L303:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L302:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+124
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L306
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L307
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #11
	bne	L307
	ldr	r0, [fp, #-16]
	bl	_Z20c_mov_r0_cont_rb_incPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L307:
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #1
	bne	L309
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #11
	bne	L309
	ldr	r0, [fp, #-16]
	bl	_Z20c_mov_r1_cont_rb_incPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L309:
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L311
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #11
	bne	L311
	ldr	r0, [fp, #-16]
	bl	_Z20c_mov_ra_cont_rb_incPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L311:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L306:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+128
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L314
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #11
	bne	L315
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L315
	ldr	r0, [fp, #-16]
	bl	_Z20c_mov_cont_dec_rb_r0Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L315:
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #11
	bne	L317
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #1
	bne	L317
	ldr	r0, [fp, #-16]
	bl	_Z20c_mov_cont_dec_rb_r1Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L317:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L314:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+132
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L320
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #12
	bne	L321
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L321
	ldr	r0, [fp, #-16]
	bl	_Z20c_mov_cont_rc_inc_r0Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L321:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L320:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+136
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L324
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L325
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L325
	mov	r2, #8
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #1
	bne	L325
	ldr	r0, [fp, #-16]
	bl	_Z11c_add_r0_r1Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L325:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L324:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+140
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L328
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L329
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L329
	mov	r2, #8
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #1
	bne	L329
	ldr	r0, [fp, #-16]
	bl	_Z11c_sub_r0_r1Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L329:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L328:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+144
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L332
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L333
	ldr	r0, [fp, #-16]
	bl	_Z8c_asr_r0Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L333:
	ldr	r0, L417+284
	bl	printf
	b	L235
L332:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+148
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L336
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L337
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L337
	mov	r2, #8
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #1
	bne	L337
	ldr	r0, [fp, #-16]
	bl	_Z11c_and_r0_r1Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L337:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L336:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+152
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L340
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L341
	mov	r2, #4
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L341
	mov	r2, #8
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	cmp	r3, #1
	bne	L341
	ldr	r0, [fp, #-16]
	bl	_Z11c_xor_r0_r1Pi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L341:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L340:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+156
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L344
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-36]
	ldr	r0, [fp, #-16]
	mov	r1, #0
	bl	_Z9c_bp_deplPii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-28]
	ldr	r0, [fp, #-36]
	ldr	r1, [r3, #0]
	bl	_Z8setbradrPiS_
	b	L235
L344:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+160
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L346
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-36]
	ldr	r0, [fp, #-16]
	mov	r1, #0
	bl	_Z9c_bz_deplPii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-28]
	ldr	r0, [fp, #-36]
	ldr	r1, [r3, #0]
	bl	_Z8setbradrPiS_
	b	L235
L346:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+164
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L348
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L349
	ldr	r0, [fp, #-16]
	bl	_Z7c_bp_raPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L349:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L348:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+168
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L352
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L353
	ldr	r0, [fp, #-16]
	bl	_Z7c_bz_raPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L353:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L352:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+172
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L356
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-36]
	ldr	r0, [fp, #-16]
	mov	r1, #0
	bl	_Z11c_call_deplPii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-28]
	ldr	r0, [fp, #-36]
	ldr	r1, [r3, #0]
	bl	_Z8setbradrPiS_
	b	L235
L356:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+176
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L358
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L359
	ldr	r0, [fp, #-16]
	bl	_Z9c_call_raPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L359:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L358:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+180
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L362
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	cmp	r3, #10
	bne	L363
	ldr	r0, [fp, #-16]
	bl	_Z12c_callext_raPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L363:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
	b	L235
L418:
	.align	0
L417:
	.word	lab
	.word	LC11
	.word	nlab
	.word	label
	.word	LC12
	.word	f_tasm
	.word	LC13
	.word	f_asmi
	.word	f_asml
	.word	f_x86
	.word	LC14
	.word	LC15
	.word	LC16
	.word	LC17
	.word	LC18
	.word	LC19
	.word	LC20
	.word	LC21
	.word	LC22
	.word	LC23
	.word	LC24
	.word	LC26
	.word	LC27
	.word	LC28
	.word	LC29
	.word	LC30
	.word	LC31
	.word	LC32
	.word	LC33
	.word	LC34
	.word	LC35
	.word	LC36
	.word	LC37
	.word	LC38
	.word	LC39
	.word	LC40
	.word	LC41
	.word	LC42
	.word	LC43
	.word	LC44
	.word	LC45
	.word	LC46
	.word	LC47
	.word	LC48
	.word	LC49
	.word	LC50
	.word	LC51
	.word	LC52
	.word	LC53
	.word	LC54
	.word	LC55
	.word	LC56
	.word	LC57
	.word	LC58
	.word	LC59
	.word	LC60
	.word	LC61
	.word	LC62
	.word	LC63
	.word	LC64
	.word	LC65
	.word	LC66
	.word	LC67
	.word	LC68
	.word	LC69
	.word	LC70
	.word	LC71
	.word	LC72
	.word	LC73
	.word	LC74
	.word	LC75
	.word	LC25
	.word	cod+32000
	.word	LC76
L362:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+184
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L366
	ldr	r0, [fp, #-16]
	bl	_Z8c_beginfPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L366:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+188
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L368
	ldr	r0, [fp, #-16]
	bl	_Z6c_endfPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L368:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+192
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L370
	ldr	r0, [fp, #-16]
	bl	_Z5c_retPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L370:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+196
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L372
	ldr	r0, [fp, #-16]
	bl	_Z9c_getcharPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L372:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+200
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L374
	ldr	r3, [fp, #-28]
	ldr	r0, [fp, #-16]
	ldr	r1, [r3, #0]
	bl	_Z9c_intbiosPii
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L374:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+204
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L376
	ldr	r0, [fp, #-16]
	bl	_Z9c_putcharPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L376:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+208
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L378
	ldr	r0, [fp, #-16]
	bl	_Z9c_scanhexPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L378:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+212
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L380
	ldr	r0, [fp, #-16]
	bl	_Z10c_printhexPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L380:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+216
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L382
	ldr	r0, [fp, #-16]
	bl	_Z9c_getwordPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L382:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+220
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L384
	ldr	r0, [fp, #-16]
	bl	_Z7c_fopenPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L384:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+224
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L386
	ldr	r0, [fp, #-16]
	bl	_Z8c_fclosePi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L386:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+228
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L388
	ldr	r0, [fp, #-16]
	bl	_Z7c_fgetcPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L388:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+232
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L390
	ldr	r0, [fp, #-16]
	bl	_Z7c_fputcPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L390:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+236
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L392
	ldr	r0, [fp, #-16]
	bl	_Z12c_getprocadrPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L392:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+240
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L394
	ldr	r0, [fp, #-16]
	bl	_Z6c_codePi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L394:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+244
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L396
	ldr	r0, [fp, #-16]
	bl	_Z9c_endcodePi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L396:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+248
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L398
	ldr	r0, [fp, #-16]
	bl	_Z10c_setbradrPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L398:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+252
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L400
	ldr	r0, [fp, #-16]
	bl	_Z10c_dumpcodePi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L400:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+256
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L402
	ldr	r0, [fp, #-16]
	bl	_Z12c_call_dummyPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L402:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+260
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L404
	ldr	r0, [fp, #-16]
	bl	_Z12c_dummyprintPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L404:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+264
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L406
	ldr	r0, [fp, #-16]
	bl	_Z9c_initcvmPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L406:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+268
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L408
	ldr	r0, [fp, #-16]
	bl	_Z10c_sscandecPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L408:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+272
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L410
	ldr	r0, [fp, #-16]
	bl	_Z10c_printdecPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L410:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+276
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L412
	ldr	r0, [fp, #-16]
	bl	_Z6c_exitPi
	mov	r3, r0
	str	r3, [fp, #-16]
	b	L235
L412:
	ldr	r0, [fp, #-20]
	ldr	r1, L417+280
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L414
	b	L235
L414:
	ldr	r0, L417+284
	ldr	r1, [fp, #8]
	bl	printf
L235:
	ldr	r2, [fp, #-16]
	ldr	r3, L417+288
	cmp	r2, r3
	bcc	L416
	ldr	r0, L417+292
	bl	printf
	mov	r0, #0
	bl	exit
L416:
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-348]
L228:
	ldr	r0, [fp, #-348]
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z14value_of_labelPc
_Z14value_of_labelPc:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #16
	str	r0, [fp, #-16]
	mov	r3, #0
	str	r3, [fp, #-20]
L420:
	ldr	r3, L425
	ldr	r2, [fp, #-20]
	ldr	r3, [r3, #0]
	cmp	r2, r3
	blt	L423
	b	L421
L423:
	ldr	r2, [fp, #-20]
	mov	r3, r2
	mov	r3, r3, asl #3
	add	r3, r3, r2
	mov	r2, r3, asl #2
	ldr	r3, L425+4
	add	r3, r2, r3
	mov	r0, r3
	ldr	r1, [fp, #-16]
	bl	strcmp
	mov	r3, r0
	cmp	r3, #0
	bne	L422
	ldr	r2, L425+4
	ldr	r1, [fp, #-20]
	mov	r0, #32
	mov	r3, r1
	mov	r3, r3, asl #3
	add	r3, r3, r1
	mov	r3, r3, asl #2
	add	r3, r3, r2
	add	r3, r3, r0
	ldr	r3, [r3, #0]
	str	r3, [fp, #-24]
	ldr	r3, [fp, #-24]
	str	r3, [fp, #-28]
	b	L419
L422:
	ldr	r3, [fp, #-20]
	add	r3, r3, #1
	str	r3, [fp, #-20]
	b	L420
L421:
	mov	r3, #0
	str	r3, [fp, #-28]
L419:
	ldr	r0, [fp, #-28]
	ldmea	fp, {fp, sp, pc}
L426:
	.align	0
L425:
	.word	nlab
	.word	label
	.section .rdata
	.align	0
LC77:
	.ascii	"tasm \000"
	.align	0
LC78:
	.ascii	"%s\n\000"
	.align	0
LC79:
	.ascii	"rem \000"
	.align	0
LC80:
	.ascii	"ascii \000"
	.align	0
LC81:
	.ascii	" db \"%s\",0\n\000"
	.align	0
LC82:
	.ascii	"unicode \000"
	.align	0
LC83:
	.ascii	" db \000"
	.align	0
LC84:
	.ascii	"0%Xh, 0, \000"
	.align	0
LC85:
	.ascii	"0, 0\n\000"
	.align	0
LC86:
	.ascii	"defword \000"
	.align	0
LC87:
	.ascii	"align 4\n\000"
	.align	0
LC88:
	.ascii	"w1: dw 0\n\000"
	.align	0
LC89:
	.ascii	"w%d: dw w%d\n\000"
	.align	0
LC90:
	.ascii	" dw 0\n\000"
	.align	0
LC91:
	.ascii	" dw c%d\n\000"
	.align	0
LC92:
	.ascii	" dw n%d\n\000"
	.align	0
LC93:
	.ascii	"n%d: db '%s'\n\000"
	.align	0
LC94:
	.ascii	" db 0\n\000"
	.align	0
LC95:
	.ascii	" align 4\n\000"
	.align	0
LC96:
	.ascii	"c%d:\n\000"
	.align	0
LC97:
	.ascii	"%lX\000"
	.text
	.align	0
	.global	_Z14compile_stringPiPc
_Z14compile_stringPiPc:
	@ args = 0, pretend = 0, frame = 2160
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #2160
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r0, [fp, #-20]
	ldr	r1, L469
	mov	r2, #5
	bl	strncmp
	mov	r3, r0
	cmp	r3, #0
	bne	L428
	ldr	r3, L469+4
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L429
	ldr	r3, L469+4
	ldr	r2, [fp, #-20]
	add	r2, r2, #5
	ldr	r0, [r3, #0]
	ldr	r1, L469+8
	bl	fprintf
L429:
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-2172]
	b	L427
L428:
	ldr	r0, [fp, #-20]
	ldr	r1, L469+12
	mov	r2, #4
	bl	strncmp
	mov	r3, r0
	cmp	r3, #0
	bne	L430
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-2172]
	b	L427
L430:
	ldr	r0, [fp, #-20]
	ldr	r1, L469+16
	mov	r2, #6
	bl	strncmp
	mov	r3, r0
	cmp	r3, #0
	bne	L431
	ldr	r0, [fp, #-20]
	bl	strlen
	mov	r2, r0
	ldr	r3, [fp, #-20]
	add	r3, r2, r3
	sub	r2, r3, #1
	mov	r3, #0
	strb	r3, [r2, #0]
	ldr	r3, L469+4
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L432
	ldr	r3, L469+4
	ldr	r2, [fp, #-20]
	add	r2, r2, #6
	ldr	r0, [r3, #0]
	ldr	r1, L469+20
	bl	fprintf
L432:
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-1852]
	ldr	r3, [fp, #-20]
	add	r3, r3, #6
	ldr	r0, [fp, #-1852]
	mov	r1, r3
	bl	strcpy
	ldr	r3, [fp, #-20]
	add	r3, r3, #6
	mov	r0, r3
	bl	strlen
	mov	r2, r0
	ldr	r3, [fp, #-1852]
	add	r3, r2, r3
	add	r3, r3, #1
	str	r3, [fp, #-1852]
	ldr	r3, [fp, #-1852]
	str	r3, [fp, #-2172]
	b	L427
L431:
	ldr	r0, [fp, #-20]
	ldr	r1, L469+24
	mov	r2, #8
	bl	strncmp
	mov	r3, r0
	cmp	r3, #0
	bne	L433
	ldr	r0, [fp, #-20]
	bl	strlen
	mov	r2, r0
	ldr	r3, [fp, #-20]
	add	r3, r2, r3
	sub	r2, r3, #1
	mov	r3, #0
	strb	r3, [r2, #0]
	ldr	r3, L469+4
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L434
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+28
	bl	fprintf
	mov	r3, #8
	str	r3, [fp, #-24]
L435:
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L438
	b	L436
L438:
	ldr	r1, L469+4
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	ldr	r0, [r1, #0]
	ldr	r1, L469+32
	mov	r2, r3
	bl	fprintf
	ldr	r3, [fp, #-24]
	add	r3, r3, #1
	str	r3, [fp, #-24]
	b	L435
L436:
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+36
	bl	fprintf
L434:
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-1852]
	mov	r3, #8
	str	r3, [fp, #-24]
L439:
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L442
	b	L440
L442:
	sub	r0, fp, #1840
	sub	r0, r0, #12
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	ip, r3
	ldr	r1, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r1, r3
	ldrb	r3, [r3, #0]
	strb	r3, [ip, #0]
	add	r2, r2, #1
	str	r2, [r0, #0]
	sub	r1, fp, #1840
	sub	r1, r1, #12
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	mov	r3, #0
	strb	r3, [r0, #0]
	add	r2, r2, #1
	str	r2, [r1, #0]
	ldr	r3, [fp, #-24]
	add	r3, r3, #1
	str	r3, [fp, #-24]
	b	L439
L440:
	sub	r1, fp, #1840
	sub	r1, r1, #12
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	mov	r3, #0
	strb	r3, [r0, #0]
	add	r2, r2, #1
	str	r2, [r1, #0]
	sub	r1, fp, #1840
	sub	r1, r1, #12
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	mov	r3, #0
	strb	r3, [r0, #0]
	add	r2, r2, #1
	str	r2, [r1, #0]
	ldr	r3, [fp, #-1852]
	str	r3, [fp, #-2172]
	b	L427
L433:
	ldr	r0, [fp, #-20]
	ldr	r1, L469+40
	mov	r2, #8
	bl	strncmp
	mov	r3, r0
	cmp	r3, #0
	bne	L443
	ldr	r3, [fp, #-20]
	add	r2, r3, #8
	sub	r3, fp, #1952
	sub	r3, r3, #12
	sub	r3, r3, #4
	mov	r0, r2
	ldr	r1, L469+44
	mov	r2, r3
	bl	sscanf
	ldr	r3, L469+4
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L444
	ldr	r2, L469+48
	ldr	r3, L469+48
	ldr	r3, [r3, #0]
	add	r3, r3, #1
	str	r3, [r2, #0]
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+52
	bl	fprintf
	ldr	r3, L469+48
	ldr	r3, [r3, #0]
	cmp	r3, #1
	bne	L445
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+56
	bl	fprintf
	b	L446
L445:
	ldr	r2, L469+4
	ldr	ip, L469+48
	ldr	r3, L469+48
	ldr	r3, [r3, #0]
	sub	r3, r3, #1
	ldr	r0, [r2, #0]
	ldr	r1, L469+60
	ldr	r2, [ip, #0]
	bl	fprintf
L446:
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+64
	bl	fprintf
	ldr	r3, L469+4
	ldr	r2, L469+48
	ldr	r0, [r3, #0]
	ldr	r1, L469+68
	ldr	r2, [r2, #0]
	bl	fprintf
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+64
	bl	fprintf
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+64
	bl	fprintf
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+64
	bl	fprintf
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+64
	bl	fprintf
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+64
	bl	fprintf
	ldr	r3, L469+4
	ldr	r2, L469+48
	ldr	r0, [r3, #0]
	ldr	r1, L469+72
	ldr	r2, [r2, #0]
	bl	fprintf
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+64
	bl	fprintf
	ldr	r2, L469+4
	ldr	ip, L469+48
	sub	r3, fp, #1952
	sub	r3, r3, #12
	sub	r3, r3, #4
	ldr	r0, [r2, #0]
	ldr	r1, L469+76
	ldr	r2, [ip, #0]
	bl	fprintf
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+80
	bl	fprintf
	ldr	r3, L469+4
	ldr	r0, [r3, #0]
	ldr	r1, L469+84
	bl	fprintf
	ldr	r3, L469+4
	ldr	r2, L469+48
	ldr	r0, [r3, #0]
	ldr	r1, L469+88
	ldr	r2, [r2, #0]
	bl	fprintf
L444:
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-1860]
	sub	r3, fp, #1952
	sub	r3, r3, #12
	sub	r3, r3, #4
	mov	r0, r3
	bl	strlen
	str	r0, [fp, #-1864]
	ldr	r2, [fp, #-1864]
	mov	r3, r2, asr #31
	mov	r3, r3, lsr #30
	add	r3, r2, r3
	mov	r3, r3, asr #2
	add	r3, r3, #1
	str	r3, [fp, #-1868]
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-1856]
	ldr	r2, [fp, #-1856]
	ldr	r3, L469+92
	ldr	r3, [r3, #4]
	str	r3, [r2, #0]
	ldr	r2, L469+92
	ldr	r3, [fp, #-1856]
	str	r3, [r2, #4]
	ldr	r3, [fp, #-1856]
	add	r3, r3, #4
	str	r3, [fp, #-1856]
	sub	r1, fp, #1840
	sub	r1, r1, #12
	sub	r1, r1, #4
	ldr	r0, [r1, #0]
	mov	r3, r0
	mov	ip, r3
	ldr	r3, [fp, #-1868]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-1856]
	add	r3, r2, r3
	add	r3, r3, #16
	str	r3, [ip, #0]
	add	r0, r0, #4
	str	r0, [r1, #0]
	sub	r2, fp, #1840
	sub	r2, r2, #12
	sub	r2, r2, #4
	ldr	r1, [r2, #0]
	mov	r3, r1
	mov	r0, r3
	mov	r3, #0
	str	r3, [r0, #0]
	add	r1, r1, #4
	str	r1, [r2, #0]
	sub	r2, fp, #1840
	sub	r2, r2, #12
	sub	r2, r2, #4
	ldr	r1, [r2, #0]
	mov	r3, r1
	mov	r0, r3
	mov	r3, #0
	str	r3, [r0, #0]
	add	r1, r1, #4
	str	r1, [r2, #0]
	sub	r2, fp, #1840
	sub	r2, r2, #12
	sub	r2, r2, #4
	ldr	r1, [r2, #0]
	mov	r3, r1
	mov	r0, r3
	ldr	r3, [fp, #-1856]
	add	r3, r3, #4
	str	r3, [r0, #0]
	add	r1, r1, #4
	str	r1, [r2, #0]
	sub	r3, fp, #1952
	sub	r3, r3, #12
	sub	r3, r3, #4
	ldr	r0, [fp, #-1856]
	mov	r1, r3
	bl	strcpy
	ldr	r3, [fp, #-1868]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-1856]
	add	r3, r2, r3
	str	r3, [fp, #-2172]
	b	L427
L443:
	mov	r3, #0
	str	r3, [fp, #-24]
L447:
	ldr	r3, [fp, #-24]
	cmp	r3, #7
	ble	L450
	b	L448
L450:
	ldr	r2, [fp, #-24]
	ldr	r1, L469+96
	mov	r3, r2
	mov	r3, r3, asl #2
	add	r3, r3, r2
	mov	r2, r3, asl #2
	add	r3, r3, r2
	mov	r3, r3, asl #3
	sub	r2, fp, #12
	add	r3, r3, r2
	add	r2, r3, r1
	mov	r3, #0
	strb	r3, [r2, #0]
	ldr	r3, [fp, #-24]
	add	r3, r3, #1
	str	r3, [fp, #-24]
	b	L447
L448:
	mov	r3, #0
	str	r3, [fp, #-32]
	mov	r3, #0
	str	r3, [fp, #-36]
	mov	r3, #0
	str	r3, [fp, #-24]
L451:
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	beq	L452
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #10
	beq	L452
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #13
	beq	L452
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #37
	bne	L454
	b	L452
L454:
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #32
	beq	L453
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #9
	beq	L453
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	mov	r0, r3
	bl	_Z5isdgtc
	mov	r3, r0
	cmp	r3, #0
	beq	L457
	mov	r3, #0
	str	r3, [fp, #-28]
L458:
	ldr	r2, [fp, #-24]
	ldr	r3, [fp, #-28]
	add	r2, r2, r3
	ldr	r3, [fp, #-20]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	mov	r0, r3
	bl	_Z5isdgtc
	mov	r3, r0
	cmp	r3, #0
	bne	L461
	b	L459
L461:
	ldr	r2, [fp, #-32]
	mvn	r1, #203
	mov	r3, r2
	mov	r3, r3, asl #2
	add	r3, r3, r2
	mov	r2, r3, asl #1
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	sub	ip, fp, #12
	add	r3, r3, ip
	add	r1, r3, r1
	ldr	r2, [fp, #-24]
	ldr	r3, [fp, #-28]
	add	r2, r2, r3
	ldr	r3, [fp, #-20]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]
	strb	r3, [r1, #0]
	ldr	r3, [fp, #-28]
	add	r3, r3, #1
	str	r3, [fp, #-28]
	b	L458
L459:
	ldr	r2, [fp, #-32]
	mvn	r1, #203
	mov	r3, r2
	mov	r3, r3, asl #2
	add	r3, r3, r2
	mov	r2, r3, asl #1
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	sub	r2, fp, #12
	add	r3, r3, r2
	add	r2, r3, r1
	mov	r3, #0
	strb	r3, [r2, #0]
	ldr	r3, [fp, #-32]
	add	r3, r3, #1
	str	r3, [fp, #-32]
	ldr	r2, [fp, #-24]
	ldr	r3, [fp, #-28]
	add	r3, r2, r3
	sub	r3, r3, #1
	str	r3, [fp, #-24]
	b	L453
L457:
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #64
	bne	L463
	ldr	r3, [fp, #-24]
	add	r3, r3, #1
	str	r3, [fp, #-24]
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r2, r2, r3
	sub	r3, fp, #2144
	sub	r3, r3, #12
	sub	r3, r3, #12
	mov	r0, r2
	ldr	r1, L469+44
	mov	r2, r3
	bl	sscanf
	sub	r3, fp, #2144
	sub	r3, r3, #12
	sub	r3, r3, #12
	mov	r0, r3
	bl	strlen
	mov	r2, r0
	ldr	r3, [fp, #-24]
	add	r3, r3, r2
	str	r3, [fp, #-24]
	sub	r1, fp, #1824
	sub	r1, r1, #12
	sub	r1, r1, #12
	ldr	r2, [fp, #-32]
	mov	r3, r2
	mov	r3, r3, asl #2
	add	r3, r3, r2
	mov	r2, r3, asl #2
	add	r3, r3, r2
	mov	r3, r3, asl #3
	add	r2, r1, r3
	sub	r3, fp, #2144
	sub	r3, r3, #12
	sub	r3, r3, #12
	mov	r0, r2
	mov	r1, r3
	bl	strcpy
	sub	r3, fp, #2144
	sub	r3, r3, #12
	sub	r3, r3, #12
	mov	r0, r3
	bl	_Z14value_of_labelPc
	mov	ip, r0
	sub	r1, fp, #216
	ldr	r2, [fp, #-32]
	mov	r3, r2
	mov	r3, r3, asl #2
	add	r3, r3, r2
	mov	r3, r3, asl #1
	add	r3, r1, r3
	mov	r0, r3
	ldr	r1, L469+100
	mov	r2, ip
	bl	sprintf
	ldr	r3, [fp, #-32]
	add	r3, r3, #1
	str	r3, [fp, #-32]
	sub	r3, fp, #2144
	sub	r3, r3, #12
	sub	r3, r3, #12
	ldr	r0, L469+104
	mov	r1, r3
	bl	strcpy
	b	L453
L463:
	sub	r1, fp, #36
	ldr	r0, [r1, #0]
	mov	r3, r0
	mvn	r2, #123
	sub	ip, fp, #12
	add	r3, r3, ip
	add	ip, r3, r2
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-24]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]
	strb	r3, [ip, #0]
	add	r0, r0, #1
	str	r0, [r1, #0]
L453:
	ldr	r3, [fp, #-24]
	add	r3, r3, #1
	str	r3, [fp, #-24]
	b	L451
L452:
	mvn	r2, #123
	ldr	r3, [fp, #-36]
	sub	r1, fp, #12
	add	r3, r1, r3
	add	r2, r3, r2
	mov	r3, #0
	strb	r3, [r2, #0]
	mov	r3, #0
	str	r3, [fp, #-24]
L465:
	ldr	r2, [fp, #-24]
	ldr	r3, [fp, #-32]
	cmp	r2, r3
	blt	L468
	b	L466
L468:
	sub	r1, fp, #216
	ldr	r2, [fp, #-24]
	mov	r3, r2
	mov	r3, r3, asl #2
	add	r3, r3, r2
	mov	r3, r3, asl #1
	add	r2, r1, r3
	sub	r1, fp, #248
	ldr	r3, [fp, #-24]
	mov	r3, r3, asl #2
	add	r3, r1, r3
	mov	r0, r2
	ldr	r1, L469+100
	mov	r2, r3
	bl	sscanf
	ldr	r3, [fp, #-24]
	add	r3, r3, #1
	str	r3, [fp, #-24]
	b	L465
L466:
	sub	r2, fp, #136
	sub	ip, fp, #248
	sub	r3, fp, #1824
	sub	r3, r3, #12
	sub	r3, r3, #12
	str	r3, [sp, #0]
	ldr	r3, [fp, #-20]
	str	r3, [sp, #4]
	ldr	r0, [fp, #-16]
	mov	r1, r2
	ldr	r2, [fp, #-32]
	mov	r3, ip
	bl	_Z10compile_opPiPciPlPA200_cS0_
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-2172]
L427:
	ldr	r0, [fp, #-2172]
	ldmea	fp, {fp, sp, pc}
L470:
	.align	0
L469:
	.word	LC77
	.word	f_tasm
	.word	LC78
	.word	LC79
	.word	LC80
	.word	LC81
	.word	LC82
	.word	LC83
	.word	LC84
	.word	LC85
	.word	LC86
	.word	LC11
	.word	gnw
	.word	LC87
	.word	LC88
	.word	LC89
	.word	LC90
	.word	LC91
	.word	LC92
	.word	LC93
	.word	LC94
	.word	LC95
	.word	LC96
	.word	sva
	.word	-1836
	.word	LC97
	.word	last_label
	.section .rdata
	.align	0
LC98:
	.ascii	"%04X:\000"
	.align	0
LC99:
	.ascii	" %02X\000"
	.align	0
LC100:
	.ascii	"\n\000"
	.text
	.align	0
	.global	_Z9dumpdebugv
_Z9dumpdebugv:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	ldr	r3, L476
	str	r3, [fp, #-16]
	ldr	r0, L476+4
	ldr	r1, [fp, #-16]
	bl	printf
	mov	r3, #0
	str	r3, [fp, #-20]
L472:
	ldr	r3, [fp, #-20]
	cmp	r3, #19
	ble	L475
	b	L473
L475:
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-20]
	add	r3, r2, r3
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	ldr	r0, L476+8
	mov	r1, r3
	bl	printf
	mov	r0, #1
	bl	_getstdfilex
	mov	r3, r0
	mov	r0, r3
	bl	fflush
	ldr	r3, [fp, #-20]
	add	r3, r3, #1
	str	r3, [fp, #-20]
	b	L472
L473:
	ldr	r0, L476+12
	bl	printf
	ldmea	fp, {fp, sp, pc}
L477:
	.align	0
L476:
	.word	_Z12asm_call_extPc
	.word	LC98
	.word	LC99
	.word	LC100
	.section .rdata
	.align	0
LC101:
	.ascii	"compile file %s\n\000"
	.align	0
LC102:
	.ascii	"r\000"
	.align	0
LC103:
	.ascii	"Cannot open file <%s>\n\000"
	.align	0
LC104:
	.ascii	"w\000"
	.align	0
LC105:
	.ascii	".model tiny\n\000"
	.align	0
LC106:
	.ascii	".stack 07000h\n\000"
	.align	0
LC107:
	.ascii	"extrn _scanhex\n\000"
	.align	0
LC108:
	.ascii	"extrn _printhex\n\000"
	.align	0
LC109:
	.ascii	"extrn _sscandec\n\000"
	.align	0
LC110:
	.ascii	"extrn _printdec\n\000"
	.align	0
LC111:
	.ascii	"extrn _getword\n\000"
	.align	0
LC112:
	.ascii	"extrn _f_fopen\n\000"
	.align	0
LC113:
	.ascii	"extrn _f_fclose\n\000"
	.align	0
LC114:
	.ascii	"extrn _f_fgetc\n\000"
	.align	0
LC115:
	.ascii	"extrn _f_fputc\n\000"
	.align	0
LC116:
	.ascii	"extrn _fillmem\n\000"
	.align	0
LC117:
	.ascii	"extrn _dmpcode\n\000"
	.align	0
LC118:
	.ascii	"extrn _initcvm\n\000"
	.align	0
LC119:
	.ascii	"extrn _getsva\n\000"
	.align	0
LC120:
	.ascii	".code\n\000"
	.align	0
LC121:
	.ascii	"start proc\n\000"
	.align	0
LC122:
	.ascii	" mov ax,cs\n\000"
	.align	0
LC123:
	.ascii	" mov ds,ax\n\000"
	.align	0
LC124:
	.ascii	" mov ss,ax\n\000"
	.align	0
LC125:
	.ascii	" mov es,ax\n\000"
	.align	0
LC126:
	.ascii	" mov ax,07000h\n\000"
	.align	0
LC127:
	.ascii	" mov sp,ax\n\000"
	.align	0
LC128:
	.ascii	" call main\n\000"
	.align	0
LC129:
	.ascii	" mov ah,0\n\000"
	.align	0
LC130:
	.ascii	" int 21h\n\000"
	.align	0
LC131:
	.ascii	"start endp\n\000"
	.align	0
LC132:
	.ascii	"sax: dw 0\n\000"
	.align	0
LC133:
	.ascii	"sdx: dw 0\n\000"
	.align	0
LC134:
	.ascii	"scx: dw 0\n\000"
	.align	0
LC135:
	.ascii	"ssi: dw 0\n\000"
	.align	0
LC136:
	.ascii	"sbx: dw 0\n\000"
	.align	0
LC137:
	.ascii	"sdi: dw 0\n\000"
	.align	0
LC138:
	.ascii	"main proc\n\000"
	.align	0
LC139:
	.ascii	" .intel_syntax\n\000"
	.align	0
LC140:
	.ascii	" .text\n\000"
	.align	0
LC141:
	.ascii	".globl main\n\000"
	.align	0
LC142:
	.ascii	" .type main, @function\n\000"
	.align	0
LC143:
	.ascii	"main:\n\000"
	.align	0
LC144:
	.ascii	" mov %%ax,%%cs\n\000"
	.align	0
LC145:
	.ascii	" mov %%ds,%%ax\n\000"
	.align	0
LC146:
	.ascii	".globl start\n\000"
	.align	0
LC147:
	.ascii	" .type start, @function\n\000"
	.align	0
LC148:
	.ascii	"start:\n\000"
	.align	0
LC149:
	.ascii	" mov %%cs,%%ax\n\000"
	.align	0
LC150:
	.ascii	" mov %%ax,%%ds\n\000"
	.align	0
LC151:
	.ascii	" ret\n\000"
	.align	0
LC152:
	.ascii	" .byte 0x8C, 0xC8, 0x8E, 0xD8\n\000"
	.align	0
LC153:
	.ascii	"main endp\n\000"
	.align	0
LC154:
	.ascii	"end start\n\000"
	.text
	.align	0
	.global	_Z12compile_filePiPKcS1_S1_S1_S1_
_Z12compile_filePiPKcS1_S1_S1_S1_:
	@ args = 8, pretend = 0, frame = 1020
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #1020
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	str	r2, [fp, #-24]
	str	r3, [fp, #-28]
	ldr	r0, L499
	ldr	r1, [fp, #-20]
	bl	printf
	ldr	r0, [fp, #-20]
	ldr	r1, L499+4
	bl	fopen
	mov	r3, r0
	str	r3, [fp, #-32]
	ldr	r3, [fp, #-32]
	cmp	r3, #0
	bne	L479
	ldr	r0, L499+8
	ldr	r1, [fp, #-20]
	bl	printf
	mov	r0, #0
	bl	exit
L479:
	ldr	r3, [fp, #-24]
	cmp	r3, #0
	bne	L480
	ldr	r2, L499+12
	mov	r3, #0
	str	r3, [r2, #0]
	b	L481
L480:
	ldr	r0, [fp, #-24]
	ldr	r1, L499+16
	bl	fopen
	mov	r2, r0
	ldr	r3, L499+12
	str	r2, [r3, #0]
L481:
	ldr	r3, [fp, #-28]
	cmp	r3, #0
	bne	L482
	ldr	r2, L499+20
	mov	r3, #0
	str	r3, [r2, #0]
	b	L483
L482:
	ldr	r0, [fp, #-28]
	ldr	r1, L499+16
	bl	fopen
	mov	r2, r0
	ldr	r3, L499+20
	str	r2, [r3, #0]
L483:
	ldr	r3, [fp, #4]
	cmp	r3, #0
	bne	L484
	ldr	r2, L499+24
	mov	r3, #0
	str	r3, [r2, #0]
	b	L485
L484:
	ldr	r0, [fp, #4]
	ldr	r1, L499+16
	bl	fopen
	mov	r2, r0
	ldr	r3, L499+24
	str	r2, [r3, #0]
L485:
	ldr	r3, [fp, #8]
	cmp	r3, #0
	bne	L486
	ldr	r2, L499+28
	mov	r3, #0
	str	r3, [r2, #0]
	b	L487
L486:
	ldr	r0, [fp, #8]
	ldr	r1, L499+16
	bl	fopen
	mov	r2, r0
	ldr	r3, L499+28
	str	r2, [r3, #0]
L487:
	ldr	r3, L499+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L488
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+32
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+36
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+40
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+44
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+48
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+52
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+56
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+60
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+64
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+68
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+72
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+76
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+80
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+84
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+88
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+92
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+96
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+100
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+104
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+108
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+112
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+116
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+120
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+124
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+128
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+132
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+136
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+140
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+144
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+148
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+152
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+156
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+160
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+164
	bl	fprintf
L488:
	ldr	r3, L499+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L489
	ldr	r3, L499+20
	ldr	r0, [r3, #0]
	ldr	r1, L499+168
	bl	fprintf
	ldr	r3, L499+20
	ldr	r0, [r3, #0]
	ldr	r1, L499+172
	bl	fprintf
	ldr	r3, L499+20
	ldr	r0, [r3, #0]
	ldr	r1, L499+176
	bl	fprintf
	ldr	r3, L499+20
	ldr	r0, [r3, #0]
	ldr	r1, L499+180
	bl	fprintf
	ldr	r3, L499+20
	ldr	r0, [r3, #0]
	ldr	r1, L499+184
	bl	fprintf
	ldr	r3, L499+20
	ldr	r0, [r3, #0]
	ldr	r1, L499+188
	bl	fprintf
	ldr	r3, L499+20
	ldr	r0, [r3, #0]
	ldr	r1, L499+192
	bl	fprintf
L489:
	ldr	r3, L499+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L490
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+172
	bl	fprintf
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+196
	bl	fprintf
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+200
	bl	fprintf
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+204
	bl	fprintf
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+208
	bl	fprintf
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+212
	bl	fprintf
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+124
	bl	fprintf
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+216
	bl	fprintf
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+176
	bl	fprintf
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+180
	bl	fprintf
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+184
	bl	fprintf
L490:
	ldr	r3, L499+28
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L492
	ldr	r3, L499+28
	ldr	r0, [r3, #0]
	ldr	r1, L499+172
	bl	fprintf
	ldr	r3, L499+28
	ldr	r0, [r3, #0]
	ldr	r1, L499+176
	bl	fprintf
	ldr	r3, L499+28
	ldr	r0, [r3, #0]
	ldr	r1, L499+180
	bl	fprintf
	ldr	r3, L499+28
	ldr	r0, [r3, #0]
	ldr	r1, L499+184
	bl	fprintf
	ldr	r3, L499+28
	ldr	r0, [r3, #0]
	ldr	r1, L499+220
	bl	fprintf
L492:
	sub	r3, fp, #1024
	sub	r3, r3, #8
	mov	r0, r3
	mov	r1, #1000
	ldr	r2, [fp, #-32]
	bl	fgets
	ldr	r0, [fp, #-32]
	bl	feof
	mov	r3, r0
	cmp	r3, #0
	beq	L495
	b	L493
L495:
	sub	r3, fp, #1024
	sub	r3, r3, #8
	ldr	r0, [fp, #-16]
	mov	r1, r3
	bl	_Z14compile_stringPiPc
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r2, [fp, #-16]
	ldr	r3, L499+224
	cmp	r2, r3
	bcc	L492
	ldr	r0, L499+228
	bl	printf
	mov	r0, #0
	bl	exit
L493:
	ldr	r3, L499+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L497
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+232
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	ldr	r1, L499+236
	bl	fprintf
	ldr	r3, L499+12
	ldr	r0, [r3, #0]
	bl	fclose
	ldr	r2, L499+12
	mov	r3, #0
	str	r3, [r2, #0]
L497:
	ldr	r3, L499+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L498
	ldr	r3, L499+24
	ldr	r0, [r3, #0]
	ldr	r1, L499+240
	bl	fprintf
L498:
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L500:
	.align	0
L499:
	.word	LC101
	.word	LC102
	.word	LC103
	.word	f_tasm
	.word	LC104
	.word	f_asmi
	.word	f_asml
	.word	f_x86
	.word	LC105
	.word	LC106
	.word	LC107
	.word	LC108
	.word	LC109
	.word	LC110
	.word	LC111
	.word	LC112
	.word	LC113
	.word	LC114
	.word	LC115
	.word	LC116
	.word	LC117
	.word	LC118
	.word	LC119
	.word	LC120
	.word	LC121
	.word	LC122
	.word	LC123
	.word	LC124
	.word	LC125
	.word	LC126
	.word	LC127
	.word	LC128
	.word	LC129
	.word	LC130
	.word	LC131
	.word	LC132
	.word	LC133
	.word	LC134
	.word	LC135
	.word	LC136
	.word	LC137
	.word	LC138
	.word	LC139
	.word	LC140
	.word	LC141
	.word	LC142
	.word	LC143
	.word	LC144
	.word	LC145
	.word	LC146
	.word	LC147
	.word	LC148
	.word	LC149
	.word	LC150
	.word	LC151
	.word	LC152
	.word	cod+32000
	.word	LC76
	.word	LC153
	.word	LC154
	.word	LC100
	.section .rdata
	.align	0
LC155:
	.ascii	"cvmin.txt\000"
	.text
	.align	0
	.global	_Z4initv
_Z4initv:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	ldr	r2, L507
	mov	r3, #0
	str	r3, [r2, #4]
	ldr	r2, L507+4
	ldr	r3, L507+8
	str	r3, [r2, #0]
	mov	r3, #0
	str	r3, [fp, #-16]
L502:
	ldr	r3, [fp, #-16]
	cmp	r3, #255
	ble	L505
	b	L503
L505:
	ldr	r1, L507+12
	ldr	r2, [fp, #-16]
	mov	r3, #0
	str	r3, [r1, r2, asl #2]
	ldr	r3, [fp, #-16]
	add	r3, r3, #1
	str	r3, [fp, #-16]
	b	L502
L503:
	ldr	r0, L507+16
	ldr	r1, L507+20
	bl	fopen
	mov	r2, r0
	ldr	r3, L507+24
	str	r2, [r3, #0]
	ldr	r3, L507+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L506
	mov	r0, #0
	bl	_getstdfilex
	mov	r2, r0
	ldr	r3, L507+24
	str	r2, [r3, #0]
L506:
	bl	_Z9init_codev
	ldmea	fp, {fp, sp, pc}
L508:
	.align	0
L507:
	.word	sva
	.word	freedic
	.word	dic
	.word	lab
	.word	LC155
	.word	LC102
	.word	cvmin
