@ Generated by gcc 3.2.2 for StrongARM/WinCE/PE
	.file	"/pgcc/samp/cvm/dbg.c"
	.global	buf_instr_name
	.bss
buf_instr_name:
	.space	100
	.section .rdata
	.align	0
LC0:
	.ascii	"r%X=r%X\000"
	.align	0
LC1:
	.ascii	"r0=\000"
	.align	0
LC2:
	.ascii	"code r0={r0}\000"
	.align	0
LC3:
	.ascii	"r1=\000"
	.align	0
LC4:
	.ascii	"code r1={r0}\000"
	.align	0
LC5:
	.ascii	"rA=\000"
	.align	0
LC6:
	.ascii	"rA=sva\000"
	.align	0
LC7:
	.ascii	"code rA={r0}\000"
	.align	0
LC8:
	.ascii	"r1=r0\000"
	.align	0
LC9:
	.ascii	"code r1=r0\000"
	.align	0
LC10:
	.ascii	"r2=r0\000"
	.align	0
LC11:
	.ascii	"r0=r2\000"
	.align	0
LC12:
	.ascii	"r1=r2\000"
	.align	0
LC13:
	.ascii	"rA=r0\000"
	.align	0
LC14:
	.ascii	"rB=r0\000"
	.align	0
LC15:
	.ascii	"rC=r0\000"
	.align	0
LC16:
	.ascii	"r0=rA\000"
	.align	0
LC17:
	.ascii	"r0=rB\000"
	.align	0
LC18:
	.ascii	"r0=rC\000"
	.align	0
LC19:
	.ascii	"rA=r1\000"
	.align	0
LC20:
	.ascii	"rC=r1\000"
	.align	0
LC21:
	.ascii	"rC=rA\000"
	.align	0
LC22:
	.ascii	"r1=rC\000"
	.align	0
LC23:
	.ascii	"r0=[rA]\000"
	.align	0
LC24:
	.ascii	"r0=byte[rA]\000"
	.align	0
LC25:
	.ascii	"rA=[rA]\000"
	.align	0
LC26:
	.ascii	"[rA]=r0\000"
	.align	0
LC27:
	.ascii	"byte[rA]=r0\000"
	.align	0
LC28:
	.ascii	"r0=[rA+]\000"
	.align	0
LC29:
	.ascii	"[rA+]=r0\000"
	.align	0
LC30:
	.ascii	"r0=[rB++]\000"
	.align	0
LC31:
	.ascii	"[--rB]=r0\000"
	.align	0
LC32:
	.ascii	"r1=[rB++]\000"
	.align	0
LC33:
	.ascii	"rA=[rB++]\000"
	.align	0
LC34:
	.ascii	"[--rB]=r1\000"
	.align	0
LC35:
	.ascii	"[rC++]=r0\000"
	.align	0
LC36:
	.ascii	"r0=r0+r1\000"
	.align	0
LC37:
	.ascii	"r0=r0-r1\000"
	.align	0
LC38:
	.ascii	"bp\000"
	.align	0
LC39:
	.ascii	"bz\000"
	.align	0
LC40:
	.ascii	"bp rA\000"
	.align	0
LC41:
	.ascii	"call\000"
	.align	0
LC42:
	.ascii	"call rA\000"
	.align	0
LC43:
	.ascii	"beginf\000"
	.align	0
LC44:
	.ascii	"endf\000"
	.align	0
LC45:
	.ascii	"ret\000"
	.align	0
LC46:
	.ascii	"ror r0\000"
	.align	0
LC47:
	.ascii	"asr r0\000"
	.align	0
LC48:
	.ascii	"r0=r0&r1\000"
	.align	0
LC49:
	.ascii	"r0=r0^r1\000"
	.align	0
LC50:
	.ascii	"fillmem\000"
	.align	0
LC51:
	.ascii	"callext\000"
	.align	0
LC52:
	.ascii	"callext rA\000"
	.align	0
LC53:
	.ascii	"intbios\000"
	.align	0
LC54:
	.ascii	"getchar\000"
	.align	0
LC55:
	.ascii	"putchar\000"
	.align	0
LC56:
	.ascii	"scanhex\000"
	.align	0
LC57:
	.ascii	"getword\000"
	.align	0
LC58:
	.ascii	"fopen\000"
	.align	0
LC59:
	.ascii	"fclose\000"
	.align	0
LC60:
	.ascii	"fgetc\000"
	.align	0
LC61:
	.ascii	"fputc\000"
	.align	0
LC62:
	.ascii	"getprocadr\000"
	.align	0
LC63:
	.ascii	"setbradr\000"
	.align	0
LC64:
	.ascii	"exit\000"
	.align	0
LC65:
	.ascii	"\000"
	.text
	.align	0
	.global	_Z10instr_namei
_Z10instr_namei:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	ldr	r3, [fp, #-16]
	bic	r3, r3, #3840
	bic	r3, r3, #15
	cmp	r3, #65536
	bne	L2
	ldr	r3, [fp, #-16]
	and	r3, r3, #3840
	mov	r2, r3, asr #8
	ldr	r3, [fp, #-16]
	and	r3, r3, #15
	ldr	r0, L132
	ldr	r1, L132+4
	bl	sprintf
	ldr	r3, L132
	str	r3, [fp, #-20]
	b	L1
L2:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+8
	cmp	r2, r3
	bne	L4
	ldr	r3, L132+12
	str	r3, [fp, #-20]
	b	L1
L4:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+16
	cmp	r2, r3
	bne	L6
	ldr	r3, L132+20
	str	r3, [fp, #-20]
	b	L1
L6:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+24
	cmp	r2, r3
	bne	L8
	ldr	r3, L132+28
	str	r3, [fp, #-20]
	b	L1
L8:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+32
	cmp	r2, r3
	bne	L10
	ldr	r3, L132+36
	str	r3, [fp, #-20]
	b	L1
L10:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+40
	cmp	r2, r3
	bne	L12
	ldr	r3, L132+44
	str	r3, [fp, #-20]
	b	L1
L12:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+48
	cmp	r2, r3
	bne	L14
	ldr	r3, L132+52
	str	r3, [fp, #-20]
	b	L1
L14:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+56
	cmp	r2, r3
	bne	L16
	ldr	r3, L132+60
	str	r3, [fp, #-20]
	b	L1
L16:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+64
	cmp	r2, r3
	bne	L18
	ldr	r3, L132+68
	str	r3, [fp, #-20]
	b	L1
L18:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+72
	cmp	r2, r3
	bne	L20
	ldr	r3, L132+76
	str	r3, [fp, #-20]
	b	L1
L20:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+80
	cmp	r2, r3
	bne	L22
	ldr	r3, L132+84
	str	r3, [fp, #-20]
	b	L1
L22:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+88
	cmp	r2, r3
	bne	L24
	ldr	r3, L132+92
	str	r3, [fp, #-20]
	b	L1
L24:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+96
	cmp	r2, r3
	bne	L26
	ldr	r3, L132+100
	str	r3, [fp, #-20]
	b	L1
L26:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+104
	cmp	r2, r3
	bne	L28
	ldr	r3, L132+108
	str	r3, [fp, #-20]
	b	L1
L28:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+112
	cmp	r2, r3
	bne	L30
	ldr	r3, L132+116
	str	r3, [fp, #-20]
	b	L1
L30:
	ldr	r3, [fp, #-16]
	cmp	r3, #68608
	bne	L32
	ldr	r3, L132+120
	str	r3, [fp, #-20]
	b	L1
L32:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+124
	cmp	r2, r3
	bne	L34
	ldr	r3, L132+128
	str	r3, [fp, #-20]
	b	L1
L34:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+132
	cmp	r2, r3
	bne	L36
	ldr	r3, L132+136
	str	r3, [fp, #-20]
	b	L1
L36:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+140
	cmp	r2, r3
	bne	L38
	ldr	r3, L132+144
	str	r3, [fp, #-20]
	b	L1
L38:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+148
	cmp	r2, r3
	bne	L40
	ldr	r3, L132+152
	str	r3, [fp, #-20]
	b	L1
L40:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+156
	cmp	r2, r3
	bne	L42
	ldr	r3, L132+160
	str	r3, [fp, #-20]
	b	L1
L42:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+164
	cmp	r2, r3
	bne	L44
	ldr	r3, L132+168
	str	r3, [fp, #-20]
	b	L1
L44:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+172
	cmp	r2, r3
	bne	L46
	ldr	r3, L132+176
	str	r3, [fp, #-20]
	b	L1
L46:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+180
	cmp	r2, r3
	bne	L48
	ldr	r3, L132+184
	str	r3, [fp, #-20]
	b	L1
L48:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+188
	cmp	r2, r3
	bne	L50
	ldr	r3, L132+192
	str	r3, [fp, #-20]
	b	L1
L50:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+196
	cmp	r2, r3
	bne	L52
	ldr	r3, L132+200
	str	r3, [fp, #-20]
	b	L1
L52:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+204
	cmp	r2, r3
	bne	L54
	ldr	r3, L132+208
	str	r3, [fp, #-20]
	b	L1
L54:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+212
	cmp	r2, r3
	bne	L56
	ldr	r3, L132+216
	str	r3, [fp, #-20]
	b	L1
L56:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+220
	cmp	r2, r3
	bne	L58
	ldr	r3, L132+224
	str	r3, [fp, #-20]
	b	L1
L58:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+228
	cmp	r2, r3
	bne	L60
	ldr	r3, L132+232
	str	r3, [fp, #-20]
	b	L1
L60:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+236
	cmp	r2, r3
	bne	L62
	ldr	r3, L132+240
	str	r3, [fp, #-20]
	b	L1
L62:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+244
	cmp	r2, r3
	bne	L64
	ldr	r3, L132+248
	str	r3, [fp, #-20]
	b	L1
L64:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+252
	cmp	r2, r3
	bne	L66
	ldr	r3, L132+256
	str	r3, [fp, #-20]
	b	L1
L66:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+260
	cmp	r2, r3
	bne	L68
	ldr	r3, L132+264
	str	r3, [fp, #-20]
	b	L1
L68:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+268
	cmp	r2, r3
	bne	L70
	ldr	r3, L132+272
	str	r3, [fp, #-20]
	b	L1
L70:
	ldr	r3, [fp, #-16]
	cmp	r3, #89088
	bne	L72
	ldr	r3, L132+276
	str	r3, [fp, #-20]
	b	L1
L72:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+280
	cmp	r2, r3
	bne	L74
	ldr	r3, L132+284
	str	r3, [fp, #-20]
	b	L1
L74:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+288
	cmp	r2, r3
	bne	L76
	ldr	r3, L132+292
	str	r3, [fp, #-20]
	b	L1
L76:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+296
	cmp	r2, r3
	bne	L78
	ldr	r3, L132+300
	str	r3, [fp, #-20]
	b	L1
L78:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+304
	cmp	r2, r3
	bne	L80
	ldr	r3, L132+308
	str	r3, [fp, #-20]
	b	L1
L80:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+312
	cmp	r2, r3
	bne	L82
	ldr	r3, L132+316
	str	r3, [fp, #-20]
	b	L1
L82:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+320
	cmp	r2, r3
	bne	L84
	ldr	r3, L132+324
	str	r3, [fp, #-20]
	b	L1
L84:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+328
	cmp	r2, r3
	bne	L86
	ldr	r3, L132+332
	str	r3, [fp, #-20]
	b	L1
L86:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+336
	cmp	r2, r3
	bne	L88
	ldr	r3, L132+340
	str	r3, [fp, #-20]
	b	L1
L88:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+344
	cmp	r2, r3
	bne	L90
	ldr	r3, L132+348
	str	r3, [fp, #-20]
	b	L1
L90:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+352
	cmp	r2, r3
	bne	L92
	ldr	r3, L132+356
	str	r3, [fp, #-20]
	b	L1
L92:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+360
	cmp	r2, r3
	bne	L94
	ldr	r3, L132+364
	str	r3, [fp, #-20]
	b	L1
L94:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+368
	cmp	r2, r3
	bne	L96
	ldr	r3, L132+372
	str	r3, [fp, #-20]
	b	L1
L96:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+376
	cmp	r2, r3
	bne	L98
	ldr	r3, L132+380
	str	r3, [fp, #-20]
	b	L1
L98:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+384
	cmp	r2, r3
	bne	L100
	ldr	r3, L132+388
	str	r3, [fp, #-20]
	b	L1
L100:
	ldr	r3, [fp, #-16]
	cmp	r3, #917504
	bne	L102
	ldr	r3, L132+392
	str	r3, [fp, #-20]
	b	L1
L102:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+396
	cmp	r2, r3
	bne	L104
	ldr	r3, L132+400
	str	r3, [fp, #-20]
	b	L1
L104:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+404
	cmp	r2, r3
	bne	L3
	ldr	r3, L132+408
	str	r3, [fp, #-20]
	b	L1
L3:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+412
	cmp	r2, r3
	bne	L108
	ldr	r3, L132+416
	str	r3, [fp, #-20]
	b	L1
L108:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+420
	cmp	r2, r3
	bne	L110
	ldr	r3, L132+424
	str	r3, [fp, #-20]
	b	L1
L110:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+428
	cmp	r2, r3
	bne	L112
	ldr	r3, L132+432
	str	r3, [fp, #-20]
	b	L1
L112:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+436
	cmp	r2, r3
	bne	L114
	ldr	r3, L132+440
	str	r3, [fp, #-20]
	b	L1
L114:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+444
	cmp	r2, r3
	bne	L116
	ldr	r3, L132+448
	str	r3, [fp, #-20]
	b	L1
L116:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+452
	cmp	r2, r3
	bne	L118
	ldr	r3, L132+456
	str	r3, [fp, #-20]
	b	L1
L118:
	ldr	r3, [fp, #-16]
	cmp	r3, #3276800
	bne	L120
	ldr	r3, L132+460
	str	r3, [fp, #-20]
	b	L1
L120:
	ldr	r3, [fp, #-16]
	cmp	r3, #3342336
	bne	L122
	ldr	r3, L132+464
	str	r3, [fp, #-20]
	b	L1
L122:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+468
	cmp	r2, r3
	bne	L124
	ldr	r3, L132+472
	str	r3, [fp, #-20]
	b	L1
L124:
	ldr	r2, [fp, #-16]
	ldr	r3, L132+476
	cmp	r2, r3
	bne	L109
	ldr	r3, L132+480
	str	r3, [fp, #-20]
	b	L1
L109:
	ldr	r3, [fp, #-16]
	cmp	r3, #1310720
	bne	L128
	ldr	r3, L132+484
	str	r3, [fp, #-20]
	b	L1
L128:
	ldr	r2, [fp, #-16]
	mvn	r3, #-16777216
	cmp	r2, r3
	bne	L130
	ldr	r3, L132+488
	str	r3, [fp, #-20]
	b	L1
L130:
	ldr	r3, L132+492
	str	r3, [fp, #-20]
L1:
	ldr	r0, [fp, #-20]
	ldmea	fp, {fp, sp, pc}
L133:
	.align	0
L132:
	.word	buf_instr_name
	.word	LC0
	.word	2162703
	.word	LC1
	.word	16842767
	.word	LC2
	.word	65807
	.word	LC3
	.word	16843023
	.word	LC4
	.word	2165263
	.word	LC5
	.word	3213839
	.word	LC6
	.word	16845327
	.word	LC7
	.word	65792
	.word	LC8
	.word	16843008
	.word	LC9
	.word	66048
	.word	LC10
	.word	65538
	.word	LC11
	.word	65794
	.word	LC12
	.word	68096
	.word	LC13
	.word	68352
	.word	LC14
	.word	LC15
	.word	65546
	.word	LC16
	.word	65547
	.word	LC17
	.word	65548
	.word	LC18
	.word	68097
	.word	LC19
	.word	68609
	.word	LC20
	.word	68618
	.word	LC21
	.word	65804
	.word	LC22
	.word	65562
	.word	LC23
	.word	65578
	.word	LC24
	.word	68122
	.word	LC25
	.word	72192
	.word	LC26
	.word	76288
	.word	LC27
	.word	65690
	.word	LC28
	.word	104960
	.word	LC29
	.word	65627
	.word	LC30
	.word	80640
	.word	LC31
	.word	65883
	.word	LC32
	.word	68187
	.word	LC33
	.word	80641
	.word	LC34
	.word	LC35
	.word	131073
	.word	LC36
	.word	196609
	.word	LC37
	.word	798719
	.word	LC38
	.word	802815
	.word	LC39
	.word	789247
	.word	LC40
	.word	864255
	.word	LC41
	.word	854783
	.word	LC42
	.word	917505
	.word	LC43
	.word	917506
	.word	LC44
	.word	983039
	.word	LC45
	.word	393471
	.word	LC46
	.word	459007
	.word	LC47
	.word	524289
	.word	LC48
	.word	589825
	.word	LC49
	.word	LC50
	.word	1048335
	.word	LC51
	.word	1048330
	.word	LC52
	.word	1572623
	.word	LC53
	.word	1048831
	.word	LC54
	.word	1179392
	.word	LC55
	.word	1179903
	.word	LC56
	.word	1245439
	.word	LC57
	.word	3211265
	.word	LC58
	.word	LC59
	.word	LC60
	.word	3407873
	.word	LC61
	.word	1572865
	.word	LC62
	.word	LC63
	.word	LC64
	.word	LC65
	.section .rdata
	.align	0
LC66:
	.ascii	"\n\000"
	.align	0
LC67:
	.ascii	"r0=%08lX\n\000"
	.align	0
LC68:
	.ascii	"r1=%08lX\n\000"
	.align	0
LC69:
	.ascii	"r2=%08lX\n\000"
	.align	0
LC70:
	.ascii	"rA=%08lX [rA]=%08lX\n\000"
	.align	0
LC71:
	.ascii	"rB=%08lX [rB]=%08lX\n\000"
	.align	0
LC72:
	.ascii	"rC=%08lX\n\000"
	.align	0
LC73:
	.ascii	"%lX: %08lX %s %08lX\n\000"
	.align	0
LC74:
	.ascii	"debug> \000"
	.align	0
LC75:
	.ascii	"%x %x\000"
	.align	0
LC76:
	.ascii	"adr=%X len=%X\n\000"
	.align	0
LC77:
	.ascii	"\n"
	.ascii	"stack overflow\n\000"
	.align	0
LC78:
	.ascii	"\n"
	.ascii	"stack underflow\n\000"
	.align	0
LC79:
	.ascii	"%x\000"
	.align	0
LC80:
	.ascii	"Instruction %X not implemented\n\000"
	.text
	.align	0
	.global	_Z12interp_debugc
_Z12interp_debugc:
	@ args = 0, pretend = 0, frame = 132
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #136
	mov	r3, r0
	strb	r3, [fp, #-21]
	ldr	r3, L264
	str	r3, [fp, #-28]
	ldr	r2, L264+4
	mov	r3, #0
	str	r3, [r2, #0]
	ldr	r2, L264+8
	ldr	r3, L264
	str	r3, [r2, #40]
	ldr	r2, L264+8
	ldr	r3, L264
	str	r3, [r2, #44]
L135:
	ldrb	r3, [fp, #-21]	@ zero_extendqisi2
	cmp	r3, #114
	beq	L138
	ldr	r0, L264+12
	bl	printf
	ldr	r3, L264+8
	ldr	r0, L264+16
	ldr	r1, [r3, #0]
	bl	printf
	ldr	r3, L264+8
	ldr	r0, L264+20
	ldr	r1, [r3, #4]
	bl	printf
	ldr	r3, L264+8
	ldr	r0, L264+24
	ldr	r1, [r3, #8]
	bl	printf
	ldr	r2, L264+8
	ldr	r3, L264+8
	ldr	r3, [r3, #40]
	ldr	r0, L264+28
	ldr	r1, [r2, #40]
	ldr	r2, [r3, #0]
	bl	printf
	ldr	r2, L264+8
	ldr	r3, L264+8
	ldr	r3, [r3, #44]
	ldr	r0, L264+32
	ldr	r1, [r2, #44]
	ldr	r2, [r3, #0]
	bl	printf
	ldr	r3, L264+8
	ldr	r0, L264+36
	ldr	r1, [r3, #48]
	bl	printf
L138:
	sub	r1, fp, #28
	ldr	r2, [r1, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [fp, #-32]
	add	r2, r2, #4
	str	r2, [r1, #0]
	ldrb	r3, [fp, #-21]	@ zero_extendqisi2
	cmp	r3, #114
	beq	L139
	ldr	r0, [fp, #-32]
	bl	_Z10instr_namei
	mov	ip, r0
	ldr	r3, [fp, #-28]
	sub	r2, r3, #4
	ldr	r3, [fp, #-28]
	ldr	r3, [r3, #0]
	str	r3, [sp, #0]
	ldr	r0, L264+40
	mov	r1, r2
	ldr	r2, [fp, #-32]
	mov	r3, ip
	bl	printf
	ldr	r0, L264+44
	bl	printf
	ldrb	r3, [fp, #-21]	@ zero_extendqisi2
	cmp	r3, #100
	bne	L140
	sub	r3, fp, #144
	mov	r0, r3
	bl	gets
	b	L141
L140:
	sub	r3, fp, #144
	mov	r0, r3
	ldr	r1, L264+48
	bl	strcpy
L141:
	ldrb	r3, [fp, #-144]	@ zero_extendqisi2
	cmp	r3, #113
	bne	L142
	b	L134
L142:
	ldrb	r3, [fp, #-144]	@ zero_extendqisi2
	cmp	r3, #100
	bne	L139
	mov	r3, #0
	str	r3, [fp, #-148]
	sub	r3, fp, #144
	add	r3, r3, #1
	sub	r2, fp, #148
	sub	ip, fp, #152
	mov	r0, r3
	ldr	r1, L264+52
	mov	r3, ip
	bl	sscanf
	ldr	r0, L264+56
	ldr	r1, [fp, #-148]
	ldr	r2, [fp, #-152]
	bl	printf
	ldr	r3, [fp, #-148]
	cmp	r3, #0
	bne	L145
	bl	_Z7dmpcodev
	b	L139
L145:
	ldr	r0, [fp, #-148]
	ldr	r1, [fp, #-152]
	bl	_Z13dmpcodeadrlenii
L139:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+60
	cmp	r2, r3
	bne	L147
	ldr	r1, L264+8
	sub	r0, fp, #28
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L135
L147:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+64
	cmp	r2, r3
	bne	L149
	ldr	r1, L264+8
	sub	r0, fp, #28
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #4]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L135
L149:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+68
	cmp	r2, r3
	bne	L151
	ldr	r1, L264+8
	sub	r0, fp, #28
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #40]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L135
L151:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+72
	cmp	r2, r3
	bne	L153
	ldr	r2, L264+8
	ldr	r3, L264+76
	str	r3, [r2, #40]
	b	L135
L153:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+80
	cmp	r2, r3
	bne	L155
	ldr	r3, L264+8
	add	r0, r3, #48
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L264+60
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, L264+8
	add	r1, r3, #48
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, L264+8
	ldr	r3, [r3, #0]
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	b	L135
L155:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+84
	cmp	r2, r3
	bne	L157
	ldr	r3, L264+8
	add	r0, r3, #48
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L264+64
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, L264+8
	add	r1, r3, #48
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, L264+8
	ldr	r3, [r3, #0]
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	b	L135
L157:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+88
	cmp	r2, r3
	bne	L159
	ldr	r3, L264+8
	add	r0, r3, #48
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L264+68
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, L264+8
	add	r1, r3, #48
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, L264+8
	ldr	r3, [r3, #0]
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	b	L135
L159:
	ldr	r3, [fp, #-32]
	bic	r3, r3, #3840
	bic	r3, r3, #15
	cmp	r3, #65536
	bne	L161
	ldr	r3, [fp, #-32]
	and	r3, r3, #65280
	mov	r3, r3, asr #8
	str	r3, [fp, #-152]
	ldr	r3, [fp, #-32]
	and	r3, r3, #255
	str	r3, [fp, #-148]
	ldr	r3, [fp, #-152]
	mov	r2, r3, asl #2
	ldr	r3, L264+8
	add	r1, r2, r3
	ldr	r3, [fp, #-148]
	mov	r2, r3, asl #2
	ldr	r3, L264+8
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	str	r3, [r1, #0]
	b	L135
L161:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+92
	cmp	r2, r3
	bne	L163
	ldr	r2, L264+8
	ldr	r3, L264+8
	ldr	r3, [r3, #40]
	ldr	r3, [r3, #0]
	str	r3, [r2, #0]
	b	L135
L163:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+96
	cmp	r2, r3
	bne	L165
	ldr	r2, L264+8
	ldr	r3, L264+8
	ldr	r3, [r3, #40]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	str	r3, [r2, #0]
	b	L135
L165:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+100
	cmp	r2, r3
	bne	L167
	ldr	r2, L264+8
	ldr	r3, L264+8
	ldr	r3, [r3, #40]
	ldr	r3, [r3, #0]
	str	r3, [r2, #40]
	b	L135
L167:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+104
	cmp	r2, r3
	bne	L169
	ldr	r3, L264+8
	ldr	r2, [r3, #40]
	ldr	r3, L264+8
	ldr	r3, [r3, #0]
	str	r3, [r2, #0]
	b	L135
L169:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+108
	cmp	r2, r3
	bne	L171
	ldr	r3, L264+8
	ldr	r2, [r3, #40]
	ldr	r3, L264+8
	ldrb	r3, [r3, #0]
	strb	r3, [r2, #0]
	b	L135
L171:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+112
	cmp	r2, r3
	bne	L173
	ldr	r1, L264+8
	ldr	r0, L264+8
	ldr	r3, [fp, #-28]
	ldr	r2, [r3, #0]
	mov	r3, r2, asr #31
	mov	r3, r3, lsr #30
	add	r3, r2, r3
	mov	r3, r3, asr #2
	mov	r2, r3, asl #2
	ldr	r3, [r0, #40]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	str	r3, [r1, #0]
	ldr	r3, [fp, #-28]
	add	r3, r3, #4
	str	r3, [fp, #-28]
	b	L135
L173:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+116
	cmp	r2, r3
	bne	L175
	ldr	r1, L264+8
	ldr	r3, [fp, #-28]
	ldr	r2, [r3, #0]
	mov	r3, r2, asr #31
	mov	r3, r3, lsr #30
	add	r3, r2, r3
	mov	r3, r3, asr #2
	mov	r2, r3, asl #2
	ldr	r3, [r1, #40]
	add	r2, r2, r3
	ldr	r3, L264+8
	ldr	r3, [r3, #0]
	str	r3, [r2, #0]
	ldr	r3, [fp, #-28]
	add	r3, r3, #4
	str	r3, [fp, #-28]
	b	L135
L175:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+120
	cmp	r2, r3
	bne	L177
	ldr	r1, L264+8
	ldr	r3, L264+8
	add	r0, r3, #44
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L135
L177:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+124
	cmp	r2, r3
	bne	L179
	ldr	r2, L264+8
	ldr	r3, L264+8
	ldr	r3, [r3, #44]
	sub	r3, r3, #4
	str	r3, [r2, #44]
	mov	r2, r3
	ldr	r3, L264+8
	ldr	r3, [r3, #0]
	str	r3, [r2, #0]
	b	L135
L179:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+128
	cmp	r2, r3
	bne	L181
	ldr	r1, L264+8
	ldr	r3, L264+8
	add	r0, r3, #44
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #4]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L135
L181:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+132
	cmp	r2, r3
	bne	L183
	ldr	r1, L264+8
	ldr	r3, L264+8
	add	r0, r3, #44
	ldr	r2, [r0, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [r1, #40]
	add	r2, r2, #4
	str	r2, [r0, #0]
	b	L135
L183:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+136
	cmp	r2, r3
	bne	L185
	ldr	r2, L264+8
	ldr	r3, L264+8
	ldr	r3, [r3, #44]
	sub	r3, r3, #4
	str	r3, [r2, #44]
	mov	r2, r3
	ldr	r3, L264+8
	ldr	r3, [r3, #4]
	str	r3, [r2, #0]
	b	L135
L185:
	ldr	r3, [fp, #-32]
	cmp	r3, #89088
	bne	L187
	ldr	r3, L264+8
	add	r1, r3, #48
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, L264+8
	ldr	r3, [r3, #0]
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	b	L135
L187:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+140
	cmp	r2, r3
	bne	L189
	ldr	r0, L264+8
	ldr	r3, L264+8
	ldr	r2, L264+8
	ldr	r1, [r3, #0]
	ldr	r3, [r2, #4]
	add	r3, r1, r3
	str	r3, [r0, #0]
	b	L135
L189:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+144
	cmp	r2, r3
	bne	L191
	ldr	r0, L264+8
	ldr	r3, L264+8
	ldr	r2, L264+8
	ldr	r1, [r3, #0]
	ldr	r3, [r2, #4]
	rsb	r3, r3, r1
	str	r3, [r0, #0]
	b	L135
L191:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+148
	cmp	r2, r3
	bne	L193
	sub	r1, fp, #28
	ldr	r3, [r1, #0]
	mov	r2, r3
	ldr	r2, [r2, #0]
	str	r2, [fp, #-36]
	add	r3, r3, #4
	str	r3, [r1, #0]
	ldr	r3, L264+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	blt	L135
	ldr	r3, [fp, #-36]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-28]
	add	r3, r3, r2
	str	r3, [fp, #-28]
	b	L135
L193:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+152
	cmp	r2, r3
	bne	L196
	sub	r1, fp, #28
	ldr	r3, [r1, #0]
	mov	r2, r3
	ldr	r2, [r2, #0]
	str	r2, [fp, #-36]
	add	r3, r3, #4
	str	r3, [r1, #0]
	ldr	r3, L264+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bne	L135
	ldr	r3, [fp, #-36]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-28]
	add	r3, r3, r2
	str	r3, [fp, #-28]
	b	L135
L196:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+156
	cmp	r2, r3
	bne	L199
	ldr	r3, L264+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	blt	L135
	ldr	r3, L264+8
	ldr	r3, [r3, #40]
	str	r3, [fp, #-28]
	b	L135
L199:
	ldr	r3, [fp, #-32]
	cmp	r3, #1310720
	bne	L202
	ldr	r3, L264+8
	ldr	r2, L264+8
	ldr	r1, [r3, #0]
	ldr	r3, [r2, #40]
	rsb	r3, r3, r1
	mov	r3, r3, asr #2
	sub	r3, r3, #2
	str	r3, [fp, #-152]
	ldr	r3, L264+8
	mov	r2, #4
	ldr	r3, [r3, #40]
	add	r2, r2, r3
	ldr	r3, [fp, #-152]
	str	r3, [r2, #0]
	b	L135
L202:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+160
	cmp	r2, r3
	bne	L204
	ldr	r3, L264+4
	ldr	r2, [r3, #0]
	ldr	r3, L264+164
	cmp	r2, r3
	ble	L205
	ldr	r0, L264+168
	bl	printf
	b	L134
L205:
	sub	r1, fp, #28
	ldr	r3, [r1, #0]
	mov	r2, r3
	ldr	r2, [r2, #0]
	str	r2, [fp, #-36]
	add	r3, r3, #4
	str	r3, [r1, #0]
	ldr	r0, L264+172
	ldr	ip, L264+4
	ldr	r2, [ip, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, [fp, #-28]
	str	r3, [r0, r1, asl #2]
	add	r2, r2, #1
	str	r2, [ip, #0]
	ldr	r3, [fp, #-36]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-28]
	add	r3, r3, r2
	str	r3, [fp, #-28]
	b	L135
L204:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+176
	cmp	r2, r3
	bne	L207
	ldr	r3, L264+4
	ldr	r2, [r3, #0]
	ldr	r3, L264+164
	cmp	r2, r3
	ble	L208
	ldr	r0, L264+168
	bl	printf
	b	L134
L208:
	ldr	r0, L264+172
	ldr	ip, L264+4
	ldr	r2, [ip, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, [fp, #-28]
	str	r3, [r0, r1, asl #2]
	add	r2, r2, #1
	str	r2, [ip, #0]
	ldr	r3, L264+8
	ldr	r3, [r3, #40]
	str	r3, [fp, #-28]
	b	L135
L207:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+180
	cmp	r2, r3
	bne	L210
	b	L135
L210:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+184
	cmp	r2, r3
	beq	L213
	ldr	r2, [fp, #-32]
	ldr	r3, L264+188
	cmp	r2, r3
	beq	L213
	b	L212
L213:
	ldr	r3, L264+4
	ldr	r3, [r3, #0]
	cmp	r3, #0
	bgt	L214
	ldr	r0, L264+192
	bl	printf
	b	L134
L214:
	ldr	r2, L264+172
	ldr	r1, L264+4
	ldr	r3, L264+4
	ldr	r3, [r3, #0]
	sub	r3, r3, #1
	str	r3, [r1, #0]
	ldr	r3, [r2, r3, asl #2]
	str	r3, [fp, #-28]
	b	L135
L212:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+196
	cmp	r2, r3
	bne	L216
	ldr	r2, L264+8
	ldr	r3, L264+8
	ldr	r3, [r3, #0]
	mov	r3, r3, asr #1
	str	r3, [r2, #0]
	b	L135
L216:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+200
	cmp	r2, r3
	bne	L218
	ldr	r0, L264+8
	ldr	r3, L264+8
	ldr	r2, L264+8
	ldr	r1, [r3, #0]
	ldr	r3, [r2, #4]
	and	r3, r1, r3
	str	r3, [r0, #0]
	b	L135
L218:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+204
	cmp	r2, r3
	bne	L220
	ldr	r0, L264+8
	ldr	r3, L264+8
	ldr	r2, L264+8
	ldr	r1, [r3, #0]
	ldr	r3, [r2, #4]
	eor	r3, r1, r3
	str	r3, [r0, #0]
	b	L135
L220:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+208
	cmp	r2, r3
	bne	L222
	sub	r1, fp, #28
	ldr	r2, [r1, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [fp, #-40]
	add	r2, r2, #4
	str	r2, [r1, #0]
	ldr	r4, L264+8
	ldr	r3, L264+8
	ldr	r2, L264+8
	ldr	ip, L264+8
	ldr	r5, [fp, #-40]
	ldr	r0, [r3, #0]
	ldr	r1, [r2, #4]
	ldr	r2, [ip, #8]
	mov	lr, pc
	mov	pc, r5
	str	r0, [r4, #0]
	b	L135
L222:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+212
	cmp	r2, r3
	bne	L224
	ldr	r4, L264+8
	ldr	r3, L264+216
	ldr	r2, L264+8
	ldr	r1, L264+8
	ldr	ip, L264+8
	ldr	r3, [r3, #0]
	ldr	r0, [r2, #0]
	ldr	r1, [r1, #4]
	ldr	r2, [ip, #8]
	mov	lr, pc
	mov	pc, r3
	str	r0, [r4, #0]
	b	L135
L224:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+220
	cmp	r2, r3
	bne	L226
	b	L135
L226:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+224
	cmp	r2, r3
	bne	L228
	ldr	r4, L264+8
	ldr	r3, L264+228
	ldr	r3, [r3, #0]
	mov	lr, pc
	mov	pc, r3
	mov	r3, r0
	and	r3, r3, #255
	str	r3, [r4, #0]
	b	L135
L228:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+232
	cmp	r2, r3
	bne	L230
	ldr	r3, L264+8
	ldr	r0, [r3, #0]
	bl	putchar
	b	L135
L230:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+236
	cmp	r2, r3
	bne	L232
	ldr	r4, L264+8
	bl	_Z7getwordv
	str	r0, [r4, #40]
	ldr	r2, L264+8
	mov	r3, #0
	str	r3, [r2, #0]
	ldr	r0, L264+240
	ldr	r1, L264+244
	ldr	r2, L264+8
	bl	sscanf
	b	L135
L232:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+248
	cmp	r2, r3
	bne	L234
	ldr	r4, L264+8
	bl	_Z9f_scanhexv
	str	r0, [r4, #0]
	b	L135
L234:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+252
	cmp	r2, r3
	bne	L236
	ldr	r3, L264+8
	ldr	r0, [r3, #0]
	bl	_Z10f_printhexi
	b	L135
L236:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+256
	cmp	r2, r3
	bne	L238
	ldr	r3, L264+8
	ldr	r0, [r3, #0]
	bl	_Z10f_printdeci
	b	L135
L238:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+260
	cmp	r2, r3
	bne	L240
	ldr	r4, L264+8
	ldr	r3, L264+8
	ldr	r0, [r3, #0]
	bl	_Z10f_sscandecPc
	str	r0, [r4, #0]
	b	L135
L240:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+264
	cmp	r2, r3
	bne	L242
	ldr	r4, L264+8
	ldr	r3, L264+8
	ldr	r2, L264+8
	ldr	r0, [r3, #0]
	ldr	r1, [r2, #4]
	bl	_Z7f_fopeniPc
	str	r0, [r4, #0]
	b	L135
L242:
	ldr	r3, [fp, #-32]
	cmp	r3, #3276800
	bne	L244
	ldr	r4, L264+8
	ldr	r3, L264+8
	ldr	r0, [r3, #0]
	bl	fclose
	str	r0, [r4, #0]
	b	L135
L244:
	ldr	r3, [fp, #-32]
	cmp	r3, #3342336
	bne	L246
	ldr	r4, L264+8
	ldr	r3, L264+8
	ldr	r0, [r3, #0]
	bl	fgetc
	str	r0, [r4, #0]
	b	L135
L246:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+268
	cmp	r2, r3
	bne	L248
	ldr	r4, L264+8
	ldr	r3, L264+8
	ldr	r2, L264+8
	ldr	r0, [r3, #4]
	ldr	r1, [r2, #0]
	bl	fputc
	str	r0, [r4, #0]
	b	L135
L248:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+272
	cmp	r2, r3
	bne	L250
	ldr	r4, L264+8
	ldr	r3, L264+8
	ldr	r2, L264+8
	ldr	r0, [r3, #0]
	ldr	r1, [r2, #4]
	bl	_Z10getprocadrPwS_
	str	r0, [r4, #0]
	b	L135
L250:
	ldr	r3, [fp, #-32]
	cmp	r3, #917504
	bne	L252
	sub	r1, fp, #28
	ldr	r3, [r1, #0]
	mov	r2, r3
	ldr	r2, [r2, #0]
	str	r2, [fp, #-152]
	add	r3, r3, #4
	str	r3, [r1, #0]
	mov	r3, #0
	str	r3, [fp, #-148]
L253:
	ldr	r2, [fp, #-148]
	ldr	r3, [fp, #-152]
	cmp	r2, r3
	blt	L256
	b	L135
L256:
	ldr	r3, L264+8
	add	r1, r3, #48
	ldr	r0, [r1, #0]
	mov	r3, r0
	mov	ip, r3
	sub	lr, fp, #28
	ldr	r2, [lr, #0]
	mov	r3, r2
	ldr	r3, [r3, #0]
	str	r3, [ip, #0]
	add	r2, r2, #4
	str	r2, [lr, #0]
	add	r0, r0, #4
	str	r0, [r1, #0]
	ldr	r3, [fp, #-148]
	add	r3, r3, #1
	str	r3, [fp, #-148]
	b	L253
L252:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+276
	cmp	r2, r3
	bne	L258
	bl	_Z7dmpcodev
	b	L135
L258:
	ldr	r2, [fp, #-32]
	ldr	r3, L264+280
	cmp	r2, r3
	bne	L260
	bl	_Z7initcvmv
	b	L135
L260:
	ldr	r2, [fp, #-32]
	mvn	r3, #-16777216
	cmp	r2, r3
	bne	L262
	ldr	r3, L264+8
	ldr	r0, [r3, #0]
	bl	exit
L262:
	ldr	r0, L264+284
	ldr	r1, [fp, #-32]
	bl	printf
	b	L135
L134:
	ldmea	fp, {r4, r5, fp, sp, pc}
L265:
	.align	0
L264:
	.word	cod
	.word	sp
	.word	reg
	.word	LC66
	.word	LC67
	.word	LC68
	.word	LC69
	.word	LC70
	.word	LC71
	.word	LC72
	.word	LC73
	.word	LC74
	.word	LC65
	.word	LC75
	.word	LC76
	.word	2162703
	.word	65807
	.word	2165263
	.word	3213839
	.word	sva
	.word	16842767
	.word	16843023
	.word	16845327
	.word	65562
	.word	65578
	.word	68122
	.word	72192
	.word	76288
	.word	65690
	.word	104960
	.word	65627
	.word	80640
	.word	65883
	.word	68187
	.word	80641
	.word	131073
	.word	196609
	.word	798719
	.word	802815
	.word	789247
	.word	864255
	.word	999
	.word	LC77
	.word	stack
	.word	854783
	.word	917505
	.word	983039
	.word	917506
	.word	LC78
	.word	459007
	.word	524289
	.word	589825
	.word	1048335
	.word	1048330
	.word	reg+40
	.word	1572623
	.word	1048831
	.word	pgetchr
	.word	1179392
	.word	1245439
	.word	awr
	.word	LC79
	.word	1179903
	.word	1441536
	.word	1834752
	.word	1704191
	.word	3211265
	.word	3407873
	.word	1572865
	.word	1507327
	.word	1703935
	.word	LC80
	.align	0
	.global	_Z6interpv
_Z6interpv:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	mov	r0, #114
	bl	_Z12interp_debugc
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z5debugv
_Z5debugv:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	ldr	r3, L268
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	mov	r0, r3
	bl	_Z12interp_debugc
	ldmea	fp, {fp, sp, pc}
L269:
	.align	0
L268:
	.word	mode
