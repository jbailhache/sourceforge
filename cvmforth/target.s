@ Generated by gcc 3.2.2 for StrongARM/WinCE/PE
	.file	"/pgcc/samp/cvm/target.c"
	.section .rdata
	.align	0
LC0:
	.ascii	" mov [word ptr sdx],dx\n\000"
	.align	0
LC1:
	.ascii	" mov [word ptr scx],cx\n\000"
	.align	0
LC2:
	.ascii	" mov [word ptr ssi],si\n\000"
	.align	0
LC3:
	.ascii	" mov [word ptr sbx],bx\n\000"
	.align	0
LC4:
	.ascii	" mov [word ptr sdi],di\n\000"
	.align	0
LC5:
	.ascii	" lea bp,_%s\n\000"
	.align	0
LC6:
	.ascii	" call bp\n\000"
	.align	0
LC7:
	.ascii	" mov dx,[word ptr sdx]\n\000"
	.align	0
LC8:
	.ascii	" mov cx,[word ptr scx]\n\000"
	.align	0
LC9:
	.ascii	" mov si,[word ptr ssi]\n\000"
	.align	0
LC10:
	.ascii	" mov bx,[word ptr sbx]\n\000"
	.align	0
LC11:
	.ascii	" mov di,[word ptr sdi]\n\000"
	.text
	.align	0
	.global	_Z12asm_call_extPc
_Z12asm_call_extPc:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+4
	bl	fprintf
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+8
	bl	fprintf
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+12
	bl	fprintf
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+16
	bl	fprintf
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+20
	bl	fprintf
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+24
	ldr	r2, [fp, #-16]
	bl	fprintf
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+28
	bl	fprintf
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+32
	bl	fprintf
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+36
	bl	fprintf
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+40
	bl	fprintf
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+44
	bl	fprintf
	ldr	r3, L2
	ldr	r0, [r3, #0]
	ldr	r1, L2+48
	bl	fprintf
	ldmea	fp, {fp, sp, pc}
L3:
	.align	0
L2:
	.word	f_tasm
	.word	LC0
	.word	LC1
	.word	LC2
	.word	LC3
	.word	LC4
	.word	LC5
	.word	LC6
	.word	LC7
	.word	LC8
	.word	LC9
	.word	LC10
	.word	LC11
	.align	0
	.global	_Z14asm_call_dummyv
_Z14asm_call_dummyv:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	ldr	r3, L5
	ldr	r0, [r3, #0]
	ldr	r1, L5+4
	bl	fprintf
	ldr	r3, L5
	ldr	r0, [r3, #0]
	ldr	r1, L5+8
	bl	fprintf
	ldr	r3, L5
	ldr	r0, [r3, #0]
	ldr	r1, L5+12
	bl	fprintf
	ldr	r3, L5
	ldr	r0, [r3, #0]
	ldr	r1, L5+16
	bl	fprintf
	ldr	r3, L5
	ldr	r0, [r3, #0]
	ldr	r1, L5+20
	bl	fprintf
	ldr	r3, L5
	ldr	r0, [r3, #0]
	ldr	r1, L5+24
	bl	fprintf
	ldr	r3, L5
	ldr	r0, [r3, #0]
	ldr	r1, L5+28
	bl	fprintf
	ldr	r3, L5
	ldr	r0, [r3, #0]
	ldr	r1, L5+32
	bl	fprintf
	ldr	r3, L5
	ldr	r0, [r3, #0]
	ldr	r1, L5+36
	bl	fprintf
	ldr	r3, L5
	ldr	r0, [r3, #0]
	ldr	r1, L5+40
	bl	fprintf
	ldmea	fp, {fp, sp, pc}
L6:
	.align	0
L5:
	.word	f_tasm
	.word	LC0
	.word	LC1
	.word	LC2
	.word	LC3
	.word	LC4
	.word	LC7
	.word	LC8
	.word	LC9
	.word	LC10
	.word	LC11
	.section .rdata
	.align	0
LC12:
	.ascii	" push ax\n\000"
	.align	0
LC13:
	.ascii	" push %%ax\n\000"
	.align	0
LC14:
	.ascii	" .byte 0x50\n\000"
	.text
	.align	0
	.global	_Z9c_push_r0Pi
_Z9c_push_r0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L8
	ldr	r3, L12
	ldr	r0, [r3, #0]
	ldr	r1, L12+4
	bl	fprintf
L8:
	ldr	r3, L12+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L9
	ldr	r3, L12+8
	ldr	r0, [r3, #0]
	ldr	r1, L12+12
	bl	fprintf
L9:
	ldr	r3, L12+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L10
	ldr	r3, L12+16
	ldr	r0, [r3, #0]
	ldr	r1, L12+12
	bl	fprintf
L10:
	ldr	r3, L12+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L11
	ldr	r3, L12+20
	ldr	r0, [r3, #0]
	ldr	r1, L12+24
	bl	fprintf
L11:
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L13:
	.align	0
L12:
	.word	f_tasm
	.word	LC12
	.word	f_asmi
	.word	LC13
	.word	f_asml
	.word	f_x86
	.word	LC14
	.section .rdata
	.align	0
LC15:
	.ascii	" pop ax\n\000"
	.align	0
LC16:
	.ascii	" pop %%ax\n\000"
	.align	0
LC17:
	.ascii	" .byte 0x58\n\000"
	.text
	.align	0
	.global	_Z8c_pop_r0Pi
_Z8c_pop_r0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L19
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L15
	ldr	r3, L19
	ldr	r0, [r3, #0]
	ldr	r1, L19+4
	bl	fprintf
L15:
	ldr	r3, L19+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L16
	ldr	r3, L19+8
	ldr	r0, [r3, #0]
	ldr	r1, L19+12
	bl	fprintf
L16:
	ldr	r3, L19+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L17
	ldr	r3, L19+16
	ldr	r0, [r3, #0]
	ldr	r1, L19+12
	bl	fprintf
L17:
	ldr	r3, L19+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L18
	ldr	r3, L19+20
	ldr	r0, [r3, #0]
	ldr	r1, L19+24
	bl	fprintf
L18:
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L20:
	.align	0
L19:
	.word	f_tasm
	.word	LC15
	.word	f_asmi
	.word	LC16
	.word	f_asml
	.word	f_x86
	.word	LC17
	.section .rdata
	.align	0
LC18:
	.ascii	" push bx\n\000"
	.align	0
LC19:
	.ascii	" push %%bx\n\000"
	.align	0
LC20:
	.ascii	" .byte 0x53\n\000"
	.text
	.align	0
	.global	_Z9c_push_r1Pi
_Z9c_push_r1Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L26
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L22
	ldr	r3, L26
	ldr	r0, [r3, #0]
	ldr	r1, L26+4
	bl	fprintf
L22:
	ldr	r3, L26+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L23
	ldr	r3, L26+8
	ldr	r0, [r3, #0]
	ldr	r1, L26+12
	bl	fprintf
L23:
	ldr	r3, L26+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L24
	ldr	r3, L26+16
	ldr	r0, [r3, #0]
	ldr	r1, L26+12
	bl	fprintf
L24:
	ldr	r3, L26+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L25
	ldr	r3, L26+20
	ldr	r0, [r3, #0]
	ldr	r1, L26+24
	bl	fprintf
L25:
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L27:
	.align	0
L26:
	.word	f_tasm
	.word	LC18
	.word	f_asmi
	.word	LC19
	.word	f_asml
	.word	f_x86
	.word	LC20
	.section .rdata
	.align	0
LC21:
	.ascii	" pop bx\n\000"
	.align	0
LC22:
	.ascii	" pop %%bx\n\000"
	.align	0
LC23:
	.ascii	" .byte 0x5B\n\000"
	.text
	.align	0
	.global	_Z8c_pop_r1Pi
_Z8c_pop_r1Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L33
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L29
	ldr	r3, L33
	ldr	r0, [r3, #0]
	ldr	r1, L33+4
	bl	fprintf
L29:
	ldr	r3, L33+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L30
	ldr	r3, L33+8
	ldr	r0, [r3, #0]
	ldr	r1, L33+12
	bl	fprintf
L30:
	ldr	r3, L33+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L31
	ldr	r3, L33+16
	ldr	r0, [r3, #0]
	ldr	r1, L33+12
	bl	fprintf
L31:
	ldr	r3, L33+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L32
	ldr	r3, L33+20
	ldr	r0, [r3, #0]
	ldr	r1, L33+24
	bl	fprintf
L32:
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L34:
	.align	0
L33:
	.word	f_tasm
	.word	LC21
	.word	f_asmi
	.word	LC22
	.word	f_asml
	.word	f_x86
	.word	LC23
	.section .rdata
	.align	0
LC24:
	.ascii	" pop cx\n\000"
	.align	0
LC25:
	.ascii	" pop %%cx\n\000"
	.align	0
LC26:
	.ascii	" .byte 0x59\n\000"
	.text
	.align	0
	.global	_Z8c_pop_r2Pi
_Z8c_pop_r2Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L40
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L36
	ldr	r3, L40
	ldr	r0, [r3, #0]
	ldr	r1, L40+4
	bl	fprintf
L36:
	ldr	r3, L40+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L37
	ldr	r3, L40+8
	ldr	r0, [r3, #0]
	ldr	r1, L40+12
	bl	fprintf
L37:
	ldr	r3, L40+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L38
	ldr	r3, L40+16
	ldr	r0, [r3, #0]
	ldr	r1, L40+12
	bl	fprintf
L38:
	ldr	r3, L40+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L39
	ldr	r3, L40+20
	ldr	r0, [r3, #0]
	ldr	r1, L40+24
	bl	fprintf
L39:
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L41:
	.align	0
L40:
	.word	f_tasm
	.word	LC24
	.word	f_asmi
	.word	LC25
	.word	f_asml
	.word	f_x86
	.word	LC26
	.align	0
	.global	_Z8setbradrPiS_
_Z8setbradrPiS_:
	@ args = 0, pretend = 0, frame = 12
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #12
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-16]
	rsb	r3, r3, r2
	sub	r3, r3, #12
	mov	r3, r3, asr #2
	str	r3, [fp, #-24]
	mov	r2, #4
	ldr	r3, [fp, #-16]
	add	r1, r2, r3
	mov	r2, #4
	ldr	r3, [fp, #-16]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	and	r2, r3, #-16777216
	ldr	r3, [fp, #-24]
	bic	r3, r3, #-16777216
	orr	r3, r2, r3
	str	r3, [r1, #0]
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z10instr_callPiPFivE
_Z10instr_callPiPFivE:
	@ args = 0, pretend = 0, frame = 20
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #20
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r3, [fp, #-20]
	str	r3, [fp, #-24]
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-28]
	ldr	r2, [fp, #-24]
	ldr	r3, [fp, #-28]
	rsb	r3, r3, r2
	sub	r2, r3, #8
	mov	r3, r2, asr #31
	mov	r3, r3, lsr #30
	add	r3, r2, r3
	mov	r3, r3, asr #2
	str	r3, [fp, #-32]
	ldr	r3, [fp, #-32]
	bic	r3, r3, #-16777216
	str	r3, [fp, #-32]
	ldr	r3, [fp, #-32]
	orr	r3, r3, #-352321536
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z12compile_callPiPFivEii
_Z12compile_callPiPFivEii:
	@ args = 0, pretend = 0, frame = 20
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #20
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	str	r2, [fp, #-24]
	str	r3, [fp, #-28]
	ldr	r3, [fp, #-24]
	cmp	r3, #0
	beq	L45
	sub	r1, fp, #16
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, [fp, #-24]
	orr	r3, r3, #-402653184
	orr	r3, r3, #12255232
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
L45:
	ldr	r3, [fp, #-20]
	str	r3, [fp, #-32]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47+4
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47+12
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47+24
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, [fp, #-32]
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47+28
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47+36
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47+40
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L47+44
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-28]
	cmp	r3, #0
	beq	L46
	sub	r1, fp, #16
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, [fp, #-28]
	orr	r3, r3, #-385875968
	orr	r3, r3, #2818048
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
L46:
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L48:
	.align	0
L47:
	.word	-443609064
	.word	-443604968
	.word	-443572200
	.word	-443568104
	.word	-443564008
	.word	-493887464
	.word	-450891772
	.word	-450949092
	.word	-450944996
	.word	-450912228
	.word	-450908132
	.word	-450904036
	.align	0
	.global	_Z18compile_call_dummyPi
_Z18compile_call_dummyPi:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L50
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L50+4
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L50+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L50+12
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L50+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L50+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L50+24
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L50+28
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L50+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L50+36
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L50+40
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L51:
	.align	0
L50:
	.word	-443609064
	.word	-443604968
	.word	-443572200
	.word	-443568104
	.word	-443564008
	.word	-493883368
	.word	-450949092
	.word	-450944996
	.word	-450912228
	.word	-450908132
	.word	-450904036
	.align	0
	.global	_Z13compile_call0PiPFivE
_Z13compile_call0PiPFivE:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r0, [fp, #-16]
	ldr	r1, [fp, #-20]
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z10getprocadrPwS_
_Z10getprocadrPwS_:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #16
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r0, [fp, #-16]
	bl	GetModuleHandleW
	mov	r3, r0
	str	r3, [fp, #-24]
	ldr	r3, [fp, #-24]
	cmp	r3, #0
	beq	L54
	ldr	r0, [fp, #-24]
	ldr	r1, [fp, #-20]
	bl	GetProcAddressW
	mov	r3, r0
	str	r3, [fp, #-28]
	b	L55
L54:
	ldr	r0, [fp, #-16]
	bl	LoadLibraryW
	mov	r3, r0
	str	r3, [fp, #-24]
	ldr	r3, [fp, #-24]
	cmp	r3, #0
	beq	L56
	ldr	r0, [fp, #-24]
	ldr	r1, [fp, #-20]
	bl	GetProcAddressW
	mov	r3, r0
	str	r3, [fp, #-28]
	b	L55
L56:
	mov	r3, #0
	str	r3, [fp, #-28]
L55:
	ldr	r3, [fp, #-28]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z12c_getprocadrPi
_Z12c_getprocadrPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, [fp, #-16]
	ldr	r1, L59
	bl	_Z13compile_call0PiPFivE
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L60:
	.align	0
L59:
	.word	_Z10getprocadrPwS_
	.section .rdata
	.align	0
LC27:
	.ascii	" mov ah,1\n"
	.ascii	" int 21h\n"
	.ascii	" mov ah,0\n\000"
	.align	0
LC28:
	.ascii	" call getchar\n"
	.ascii	" mov $0,%%ah\n\000"
	.text
	.align	0
	.global	_Z9c_getcharPi
_Z9c_getcharPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L64
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L62
	ldr	r3, L64
	ldr	r0, [r3, #0]
	ldr	r1, L64+4
	bl	fprintf
L62:
	ldr	r3, L64+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L63
	ldr	r3, L64+8
	ldr	r0, [r3, #0]
	ldr	r1, L64+12
	bl	fprintf
L63:
	ldr	r0, [fp, #-16]
	ldr	r1, L64+16
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L65:
	.align	0
L64:
	.word	f_tasm
	.word	LC27
	.word	f_asml
	.word	LC28
	.word	_Z9f_getcharv
	.section .rdata
	.align	0
LC29:
	.ascii	" mov dx,ax\n"
	.ascii	" mov ah,2\n"
	.ascii	" int 21h\n\000"
	.align	0
LC30:
	.ascii	" movl %%eax,(%%esp)\n"
	.ascii	" call putchar\n\000"
	.text
	.align	0
	.global	_Z9c_putcharPi
_Z9c_putcharPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L69
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L67
	ldr	r3, L69
	ldr	r0, [r3, #0]
	ldr	r1, L69+4
	bl	fprintf
L67:
	ldr	r3, L69+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L68
	ldr	r3, L69+8
	ldr	r0, [r3, #0]
	ldr	r1, L69+12
	bl	fprintf
L68:
	ldr	r0, [fp, #-16]
	ldr	r1, L69+16
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L70:
	.align	0
L69:
	.word	f_tasm
	.word	LC29
	.word	f_asml
	.word	LC30
	.word	_Z9f_putchari
	.align	0
	.global	_Z7c_printPi
_Z7c_printPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, [fp, #-16]
	ldr	r1, L72
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L73:
	.align	0
L72:
	.word	_Z7f_printi
	.section .rdata
	.align	0
LC31:
	.ascii	"getword\000"
	.align	0
LC32:
	.ascii	" mov si,ax\n\000"
	.align	0
LC33:
	.ascii	"\000"
	.text
	.align	0
	.global	_Z9c_getwordPi
_Z9c_getwordPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L76
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L75
	ldr	r0, L76+4
	bl	_Z12asm_call_extPc
	ldr	r3, L76
	ldr	r0, [r3, #0]
	ldr	r1, L76+8
	bl	fprintf
L75:
	ldr	r0, [fp, #-16]
	ldr	r1, L76+12
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r0, [fp, #-16]
	ldr	r1, L76+16
	ldr	r2, L76+20
	bl	_Z11c_mov_ra_imPilPc
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r0, [fp, #-16]
	bl	_Z16c_mov_r0_cont_raPi
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r0, [fp, #-16]
	ldr	r1, L76+24
	ldr	r2, L76+20
	bl	_Z11c_mov_ra_imPilPc
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r0, [fp, #-16]
	bl	_Z16c_mov_ra_cont_raPi
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r0, [fp, #-16]
	ldr	r1, L76+28
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L77:
	.align	0
L76:
	.word	f_tasm
	.word	LC31
	.word	LC32
	.word	_Z7getwordv
	.word	gwri
	.word	LC33
	.word	gpw
	.word	_Z12f_dummyprintv
	.section .rdata
	.align	0
LC34:
	.ascii	"scanhex\000"
	.text
	.align	0
	.global	_Z9c_scanhexPi
_Z9c_scanhexPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L80
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L79
	ldr	r0, L80+4
	bl	_Z12asm_call_extPc
L79:
	ldr	r0, [fp, #-16]
	ldr	r1, L80+8
	bl	_Z13compile_call0PiPFivE
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L81:
	.align	0
L80:
	.word	f_tasm
	.word	LC34
	.word	_Z9f_scanhexv
	.section .rdata
	.align	0
LC35:
	.ascii	"r\000"
	.align	0
LC36:
	.ascii	"wb\000"
	.align	0
LC37:
	.ascii	"r+b\000"
	.text
	.align	0
	.global	_Z7f_fopeniPc
_Z7f_fopeniPc:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #16
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r3, [fp, #-16]
	and	r3, r3, #3
	str	r3, [fp, #-28]
	ldr	r3, [fp, #-28]
	cmp	r3, #1
	beq	L85
	ldr	r3, [fp, #-28]
	cmp	r3, #1
	bgt	L89
	ldr	r3, [fp, #-28]
	cmp	r3, #0
	beq	L84
	b	L83
L89:
	ldr	r3, [fp, #-28]
	cmp	r3, #2
	beq	L86
	b	L83
L84:
	ldr	r0, [fp, #-20]
	ldr	r1, L90
	bl	fopen
	mov	r3, r0
	str	r3, [fp, #-24]
	b	L83
L85:
	ldr	r0, [fp, #-20]
	ldr	r1, L90+4
	bl	fopen
	mov	r3, r0
	str	r3, [fp, #-24]
	b	L83
L86:
	ldr	r0, [fp, #-20]
	ldr	r1, L90+8
	bl	fopen
	mov	r3, r0
	str	r3, [fp, #-24]
L83:
	ldr	r3, [fp, #-24]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L91:
	.align	0
L90:
	.word	LC35
	.word	LC36
	.word	LC37
	.section .rdata
	.align	0
LC38:
	.ascii	"f_fopen\000"
	.text
	.align	0
	.global	_Z7c_fopenPi
_Z7c_fopenPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L94
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L93
	ldr	r0, L94+4
	bl	_Z12asm_call_extPc
L93:
	ldr	r0, [fp, #-16]
	ldr	r1, L94+8
	bl	_Z13compile_call0PiPFivE
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L95:
	.align	0
L94:
	.word	f_tasm
	.word	LC38
	.word	_Z7f_fopeniPc
	.align	0
	.global	_Z8f_fclosePv
_Z8f_fclosePv:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, [fp, #-16]
	bl	fclose
	mov	r3, r0
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.section .rdata
	.align	0
LC39:
	.ascii	"f_fclose\000"
	.text
	.align	0
	.global	_Z8c_fclosePi
_Z8c_fclosePi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L99
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L98
	ldr	r0, L99+4
	bl	_Z12asm_call_extPc
L98:
	ldr	r0, [fp, #-16]
	ldr	r1, L99+8
	bl	_Z13compile_call0PiPFivE
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L100:
	.align	0
L99:
	.word	f_tasm
	.word	LC39
	.word	_Z8f_fclosePv
	.align	0
	.global	_Z7f_fgetcPv
_Z7f_fgetcPv:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, [fp, #-16]
	bl	fgetc
	mov	r3, r0
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.section .rdata
	.align	0
LC40:
	.ascii	"f_fgetc\000"
	.text
	.align	0
	.global	_Z7c_fgetcPi
_Z7c_fgetcPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L104
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L103
	ldr	r0, L104+4
	bl	_Z12asm_call_extPc
L103:
	ldr	r0, [fp, #-16]
	ldr	r1, L104+8
	bl	_Z13compile_call0PiPFivE
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L105:
	.align	0
L104:
	.word	f_tasm
	.word	LC40
	.word	_Z7f_fgetcPv
	.align	0
	.global	_Z7f_fputcPvc
_Z7f_fputcPvc:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	mov	r3, r1
	strb	r3, [fp, #-17]
	ldrb	r3, [fp, #-17]	@ zero_extendqisi2
	mov	r0, r3
	ldr	r1, [fp, #-16]
	bl	fputc
	mov	r3, r0
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.section .rdata
	.align	0
LC41:
	.ascii	"f_fputc\000"
	.text
	.align	0
	.global	_Z7c_fputcPi
_Z7c_fputcPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L109
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L108
	ldr	r0, L109+4
	bl	_Z12asm_call_extPc
L108:
	ldr	r0, [fp, #-16]
	ldr	r1, L109+8
	bl	_Z13compile_call0PiPFivE
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L110:
	.align	0
L109:
	.word	f_tasm
	.word	LC41
	.word	_Z7f_fputcPvc
	.align	0
	.global	_Z7f_dummyv
_Z7f_dummyv:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	ldmea	fp, {fp, sp, pc}
	.align	0
	.global	_Z12c_call_dummyPi
_Z12c_call_dummyPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, [fp, #-16]
	ldr	r1, L113
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L114:
	.align	0
L113:
	.word	_Z7f_dummyv
	.section .rdata
	.align	0
LC42:
	.ascii	"printhex\000"
	.align	0
LC43:
	.ascii	" inc sp\n"
	.ascii	" inc sp\n\000"
	.text
	.align	0
	.global	_Z10c_printhexPi
_Z10c_printhexPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L117
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L116
	ldr	r3, L117
	ldr	r0, [r3, #0]
	ldr	r1, L117+4
	bl	fprintf
	ldr	r0, L117+8
	bl	_Z12asm_call_extPc
	ldr	r3, L117
	ldr	r0, [r3, #0]
	ldr	r1, L117+12
	bl	fprintf
L116:
	ldr	r0, [fp, #-16]
	ldr	r1, L117+16
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L118:
	.align	0
L117:
	.word	f_tasm
	.word	LC12
	.word	LC42
	.word	LC43
	.word	_Z10f_printhexi
	.section .rdata
	.align	0
LC44:
	.ascii	" %d \000"
	.text
	.align	0
	.global	_Z10f_printdeci
_Z10f_printdeci:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, L120
	ldr	r1, [fp, #-16]
	bl	printf
	ldmea	fp, {fp, sp, pc}
L121:
	.align	0
L120:
	.word	LC44
	.section .rdata
	.align	0
LC45:
	.ascii	"printdec\000"
	.text
	.align	0
	.global	_Z10c_printdecPi
_Z10c_printdecPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L124
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L123
	ldr	r3, L124
	ldr	r0, [r3, #0]
	ldr	r1, L124+4
	bl	fprintf
	ldr	r0, L124+8
	bl	_Z12asm_call_extPc
	ldr	r3, L124
	ldr	r0, [r3, #0]
	ldr	r1, L124+12
	bl	fprintf
L123:
	ldr	r0, [fp, #-16]
	ldr	r1, L124+16
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L125:
	.align	0
L124:
	.word	f_tasm
	.word	LC12
	.word	LC45
	.word	LC43
	.word	_Z10f_printdeci
	.section .rdata
	.align	0
LC46:
	.ascii	"%d\000"
	.text
	.align	0
	.global	_Z10f_sscandecPc
_Z10f_sscandecPc:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	sub	r3, fp, #20
	ldr	r0, [fp, #-16]
	ldr	r1, L127
	mov	r2, r3
	bl	sscanf
	ldr	r3, [fp, #-20]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L128:
	.align	0
L127:
	.word	LC46
	.section .rdata
	.align	0
LC47:
	.ascii	"sscandec\000"
	.text
	.align	0
	.global	_Z10c_sscandecPi
_Z10c_sscandecPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L131
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L130
	ldr	r3, L131
	ldr	r0, [r3, #0]
	ldr	r1, L131+4
	bl	fprintf
	ldr	r0, L131+8
	bl	_Z12asm_call_extPc
	ldr	r3, L131
	ldr	r0, [r3, #0]
	ldr	r1, L131+12
	bl	fprintf
L130:
	ldr	r0, [fp, #-16]
	ldr	r1, L131+16
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L132:
	.align	0
L131:
	.word	f_tasm
	.word	LC12
	.word	LC47
	.word	LC24
	.word	_Z10f_sscandecPc
	.section .rdata
	.align	0
LC48:
	.ascii	"dummy.txt\000"
	.align	0
LC49:
	.ascii	"w\000"
	.text
	.align	0
	.global	_Z12f_dummyprintv
_Z12f_dummyprintv:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	ldr	r0, L134
	ldr	r1, L134+4
	bl	fopen
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r0, [fp, #-16]
	bl	fclose
	ldmea	fp, {fp, sp, pc}
L135:
	.align	0
L134:
	.word	LC48
	.word	LC49
	.align	0
	.global	_Z12c_dummyprintPi
_Z12c_dummyprintPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r0, [fp, #-16]
	ldr	r1, L137
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L138:
	.align	0
L137:
	.word	_Z12f_dummyprintv
	.section .rdata
	.align	0
LC50:
	.ascii	" mov ax,0%Xh\n\000"
	.align	0
LC51:
	.ascii	" lea ax,[%s]\n\000"
	.align	0
LC52:
	.ascii	" mov %%ax,0x%X\n\000"
	.align	0
LC53:
	.ascii	" lea %%ax,[%s]\n\000"
	.align	0
LC54:
	.ascii	" mov $0x%X,%%ax\n\000"
	.align	0
LC55:
	.ascii	" lea (%s),%%ax\n\000"
	.align	0
LC56:
	.ascii	" .byte 0xB8, 0x%X, 0x%X\n\000"
	.align	0
LC57:
	.ascii	" .byte 0xB8\n"
	.ascii	" .word %s-main\n\000"
	.text
	.align	0
	.global	_Z11c_mov_r0_imPilPc
_Z11c_mov_r0_imPilPc:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #16
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	str	r2, [fp, #-24]
	ldr	r3, L153
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L140
	ldr	r3, [fp, #-24]
	cmp	r3, #0
	beq	L142
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L141
L142:
	ldr	r3, L153
	ldr	r0, [r3, #0]
	ldr	r1, L153+4
	ldr	r2, [fp, #-20]
	bl	fprintf
	b	L140
L141:
	ldr	r3, L153
	ldr	r0, [r3, #0]
	ldr	r1, L153+8
	ldr	r2, [fp, #-24]
	bl	fprintf
L140:
	ldr	r3, L153+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L144
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L145
	ldr	r3, L153+12
	ldr	r0, [r3, #0]
	ldr	r1, L153+16
	ldr	r2, [fp, #-20]
	bl	fprintf
	b	L144
L145:
	ldr	r3, L153+12
	ldr	r0, [r3, #0]
	ldr	r1, L153+20
	ldr	r2, [fp, #-24]
	bl	fprintf
L144:
	ldr	r3, L153+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L147
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L148
	ldr	r3, L153+24
	ldr	r0, [r3, #0]
	ldr	r1, L153+28
	ldr	r2, [fp, #-20]
	bl	fprintf
	b	L147
L148:
	ldr	r3, L153+24
	ldr	r0, [r3, #0]
	ldr	r1, L153+32
	ldr	r2, [fp, #-24]
	bl	fprintf
L147:
	ldr	r3, L153+36
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L150
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L151
	ldr	r2, L153+36
	ldr	r3, [fp, #-20]
	and	ip, r3, #255
	ldr	r3, [fp, #-20]
	and	r3, r3, #65280
	mov	r3, r3, asr #8
	ldr	r0, [r2, #0]
	ldr	r1, L153+40
	mov	r2, ip
	bl	fprintf
	b	L150
L151:
	ldr	r3, L153+36
	ldr	r0, [r3, #0]
	ldr	r1, L153+44
	ldr	r2, [fp, #-24]
	bl	fprintf
L150:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L153+48
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, [fp, #-20]
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L154:
	.align	0
L153:
	.word	f_tasm
	.word	LC50
	.word	LC51
	.word	f_asmi
	.word	LC52
	.word	LC53
	.word	f_asml
	.word	LC54
	.word	LC55
	.word	f_x86
	.word	LC56
	.word	LC57
	.word	-442564608
	.section .rdata
	.align	0
LC58:
	.ascii	" mov dx,%Xh\n\000"
	.align	0
LC59:
	.ascii	" lea dx,[%s]\n\000"
	.align	0
LC60:
	.ascii	" mov %%dx,0x%X\n\000"
	.align	0
LC61:
	.ascii	" lea %%dx,[%s]\n\000"
	.align	0
LC62:
	.ascii	" mov $0x%X,%%dx\n\000"
	.align	0
LC63:
	.ascii	" lea (%s),%%dx\n\000"
	.align	0
LC64:
	.ascii	" .byte 0xBA, 0x%X, 0x%X\n\000"
	.align	0
LC65:
	.ascii	" .byte 0xBA\n"
	.ascii	" .word %s-main\n\000"
	.text
	.align	0
	.global	_Z11c_mov_r1_imPilPc
_Z11c_mov_r1_imPilPc:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #16
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	str	r2, [fp, #-24]
	ldr	r3, L168
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L156
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L157
	ldr	r3, L168
	ldr	r0, [r3, #0]
	ldr	r1, L168+4
	ldr	r2, [fp, #-20]
	bl	fprintf
	b	L156
L157:
	ldr	r3, L168
	ldr	r0, [r3, #0]
	ldr	r1, L168+8
	ldr	r2, [fp, #-24]
	bl	fprintf
L156:
	ldr	r3, L168+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L159
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L160
	ldr	r3, L168+12
	ldr	r0, [r3, #0]
	ldr	r1, L168+16
	ldr	r2, [fp, #-20]
	bl	fprintf
	b	L159
L160:
	ldr	r3, L168+12
	ldr	r0, [r3, #0]
	ldr	r1, L168+20
	ldr	r2, [fp, #-24]
	bl	fprintf
L159:
	ldr	r3, L168+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L162
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L163
	ldr	r3, L168+24
	ldr	r0, [r3, #0]
	ldr	r1, L168+28
	ldr	r2, [fp, #-20]
	bl	fprintf
	b	L162
L163:
	ldr	r3, L168+24
	ldr	r0, [r3, #0]
	ldr	r1, L168+32
	ldr	r2, [fp, #-24]
	bl	fprintf
L162:
	ldr	r3, L168+36
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L165
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L166
	ldr	r2, L168+36
	ldr	r3, [fp, #-20]
	and	ip, r3, #255
	ldr	r3, [fp, #-20]
	and	r3, r3, #65280
	mov	r3, r3, asr #8
	ldr	r0, [r2, #0]
	ldr	r1, L168+40
	mov	r2, ip
	bl	fprintf
	b	L165
L166:
	ldr	r3, L168+36
	ldr	r0, [r3, #0]
	ldr	r1, L168+44
	ldr	r2, [fp, #-24]
	bl	fprintf
L165:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L168+48
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, [fp, #-20]
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L169:
	.align	0
L168:
	.word	f_tasm
	.word	LC58
	.word	LC59
	.word	f_asmi
	.word	LC60
	.word	LC61
	.word	f_asml
	.word	LC62
	.word	LC63
	.word	f_x86
	.word	LC64
	.word	LC65
	.word	-442560512
	.section .rdata
	.align	0
LC66:
	.ascii	" mov si,%Xh\n\000"
	.align	0
LC67:
	.ascii	" lea si,[%s]\n\000"
	.align	0
LC68:
	.ascii	" mov %%si,0x%X\n\000"
	.align	0
LC69:
	.ascii	" lea %%si,[%s]\n\000"
	.align	0
LC70:
	.ascii	" mov $0x%X,%%si\n\000"
	.align	0
LC71:
	.ascii	" .byte 0xBE, 0x%X, 0x%X\n\000"
	.align	0
LC72:
	.ascii	" .byte 0xBE\n"
	.ascii	" .word %s-main\n\000"
	.text
	.align	0
	.global	_Z11c_mov_ra_imPilPc
_Z11c_mov_ra_imPilPc:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #16
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	str	r2, [fp, #-24]
	ldr	r3, L183
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L171
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L172
	ldr	r3, L183
	ldr	r0, [r3, #0]
	ldr	r1, L183+4
	ldr	r2, [fp, #-20]
	bl	fprintf
	b	L171
L172:
	ldr	r3, L183
	ldr	r0, [r3, #0]
	ldr	r1, L183+8
	ldr	r2, [fp, #-24]
	bl	fprintf
L171:
	ldr	r3, L183+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L174
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L175
	ldr	r3, L183+12
	ldr	r0, [r3, #0]
	ldr	r1, L183+16
	ldr	r2, [fp, #-20]
	bl	fprintf
	b	L174
L175:
	ldr	r3, L183+12
	ldr	r0, [r3, #0]
	ldr	r1, L183+20
	ldr	r2, [fp, #-24]
	bl	fprintf
L174:
	ldr	r3, L183+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L177
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L178
	ldr	r3, L183+24
	ldr	r0, [r3, #0]
	ldr	r1, L183+28
	ldr	r2, [fp, #-20]
	bl	fprintf
	b	L177
L178:
	ldr	r3, L183+24
	ldr	r0, [r3, #0]
	ldr	r1, L183+32
	ldr	r2, [fp, #-24]
	bl	fprintf
L177:
	ldr	r3, L183+36
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L180
	ldr	r3, [fp, #-24]
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	bne	L181
	ldr	r2, L183+36
	ldr	r3, [fp, #-20]
	and	ip, r3, #255
	ldr	r3, [fp, #-20]
	and	r3, r3, #65280
	mov	r3, r3, asr #8
	ldr	r0, [r2, #0]
	ldr	r1, L183+40
	mov	r2, ip
	bl	fprintf
	b	L180
L181:
	ldr	r3, L183+36
	ldr	r0, [r3, #0]
	ldr	r1, L183+44
	ldr	r2, [fp, #-24]
	bl	fprintf
L180:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L183+48
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, [fp, #-20]
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L184:
	.align	0
L183:
	.word	f_tasm
	.word	LC66
	.word	LC67
	.word	f_asmi
	.word	LC68
	.word	LC69
	.word	f_asml
	.word	LC70
	.word	LC63
	.word	f_x86
	.word	LC71
	.word	LC72
	.word	-442523648
	.section .rdata
	.align	0
LC73:
	.ascii	" mov [word ptr sax],ax\n\000"
	.align	0
LC74:
	.ascii	"getsva\000"
	.align	0
LC75:
	.ascii	" mov ax,[word ptr sax]\n\000"
	.text
	.align	0
	.global	_Z12c_mov_ra_svaPi
_Z12c_mov_ra_svaPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L187
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L186
	ldr	r3, L187
	ldr	r0, [r3, #0]
	ldr	r1, L187+4
	bl	fprintf
	ldr	r0, L187+8
	bl	_Z12asm_call_extPc
	ldr	r3, L187
	ldr	r0, [r3, #0]
	ldr	r1, L187+12
	bl	fprintf
	ldr	r3, L187
	ldr	r0, [r3, #0]
	ldr	r1, L187+16
	bl	fprintf
L186:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L187+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L187+24
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L188:
	.align	0
L187:
	.word	f_tasm
	.word	LC73
	.word	LC74
	.word	LC32
	.word	LC75
	.word	-442523648
	.word	sva
	.section .rdata
	.align	0
LC76:
	.ascii	" push cx\n"
	.ascii	" mov cl,0B8h\n"
	.ascii	" mov [di],cl\n"
	.ascii	" inc di\n"
	.ascii	" mov [di],al\n"
	.ascii	" inc di\n"
	.ascii	" mov[di],ah\n"
	.ascii	" inc di\n"
	.ascii	" pop cx\n\000"
	.text
	.align	0
	.global	_Z15c_q_mov_r0_imr0Pi
_Z15c_q_mov_r0_imr0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L191
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L190
	ldr	r3, L191
	ldr	r0, [r3, #0]
	ldr	r1, L191+4
	bl	fprintf
L190:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L191+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L191+12
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L191+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L191+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L191+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L191+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L191+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L191+24
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L191+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L192:
	.align	0
L191:
	.word	f_tasm
	.word	LC76
	.word	-442527744
	.word	-442564608
	.word	-443772928
	.word	-494092284
	.word	-443809792
	.section .rdata
	.align	0
LC77:
	.ascii	" push cx\n"
	.ascii	" mov cl,0BAh\n"
	.ascii	" mov [di],cl\n"
	.ascii	" inc di\n"
	.ascii	" mov [di],al\n"
	.ascii	" inc di\n"
	.ascii	" mov[di],ah\n"
	.ascii	" inc di\n"
	.ascii	" pop cx\n\000"
	.text
	.align	0
	.global	_Z15c_q_mov_r1_imr0Pi
_Z15c_q_mov_r1_imr0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L195
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L194
	ldr	r3, L195
	ldr	r0, [r3, #0]
	ldr	r1, L195+4
	bl	fprintf
L194:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L195+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L195+12
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L195+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L195+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L195+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L195+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L195+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L195+24
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L195+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L196:
	.align	0
L195:
	.word	f_tasm
	.word	LC77
	.word	-442527744
	.word	-442560512
	.word	-443772928
	.word	-494092284
	.word	-443809792
	.section .rdata
	.align	0
LC78:
	.ascii	" push cx\n"
	.ascii	" mov cl,0BEh\n"
	.ascii	" mov [di],cl\n"
	.ascii	" inc di\n"
	.ascii	" mov [di],al\n"
	.ascii	" inc di\n"
	.ascii	" mov[di],ah\n"
	.ascii	" inc di\n"
	.ascii	" pop cx\n\000"
	.text
	.align	0
	.global	_Z15c_q_mov_ra_imr0Pi
_Z15c_q_mov_ra_imr0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L199
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L198
	ldr	r3, L199
	ldr	r0, [r3, #0]
	ldr	r1, L199+4
	bl	fprintf
L198:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L199+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L199+12
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L199+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L199+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L199+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L199+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L199+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L199+24
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L199+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L200:
	.align	0
L199:
	.word	f_tasm
	.word	LC78
	.word	-442527744
	.word	-442523648
	.word	-443772928
	.word	-494092284
	.word	-443809792
	.global	reg_num_x86
	.data
	.align	0
reg_num_x86:
	.word	0
	.word	2
	.word	1
	.word	-1
	.word	-1
	.word	-1
	.word	-1
	.word	-1
	.word	-1
	.word	-1
	.word	6
	.word	3
	.word	7
	.word	0
	.word	0
	.word	0
	.global	reg_name_x86
	.section .rdata
	.align	0
LC79:
	.ascii	"ax\000"
	.align	0
LC80:
	.ascii	"dx\000"
	.align	0
LC81:
	.ascii	"cx\000"
	.align	0
LC82:
	.ascii	"bp\000"
	.align	0
LC83:
	.ascii	"si\000"
	.align	0
LC84:
	.ascii	"bx\000"
	.align	0
LC85:
	.ascii	"di\000"
	.align	0
LC86:
	.ascii	"sp\000"
	.data
	.align	0
reg_name_x86:
	.word	LC79
	.word	LC80
	.word	LC81
	.word	LC33
	.word	LC33
	.word	LC33
	.word	LC33
	.word	LC33
	.word	LC33
	.word	LC82
	.word	LC83
	.word	LC84
	.word	LC85
	.word	LC86
	.section .rdata
	.align	0
LC87:
	.ascii	" mov %s,%s\n\000"
	.align	0
LC88:
	.ascii	" mov %%%s,%%%s\n\000"
	.align	0
LC89:
	.ascii	" .byte 0x8B, 0x%X\n\000"
	.text
	.align	0
	.global	_Z9c_mov_r_rPiii
_Z9c_mov_r_rPiii:
	@ args = 0, pretend = 0, frame = 12
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #12
	str	r0, [fp, #-20]
	str	r1, [fp, #-24]
	str	r2, [fp, #-28]
	ldr	r3, L206
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L202
	ldr	r3, L206
	ldr	r2, L206+4
	ldr	ip, [fp, #-24]
	ldr	lr, L206+4
	ldr	r4, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L206+8
	ldr	r2, [r2, ip, asl #2]
	ldr	r3, [lr, r4, asl #2]
	bl	fprintf
L202:
	ldr	r3, L206+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L203
	ldr	r3, L206+12
	ldr	r2, L206+4
	ldr	ip, [fp, #-24]
	ldr	lr, L206+4
	ldr	r4, [fp, #-28]
	ldr	r0, [r3, #0]
	ldr	r1, L206+16
	ldr	r2, [r2, ip, asl #2]
	ldr	r3, [lr, r4, asl #2]
	bl	fprintf
L203:
	ldr	r3, L206+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L204
	ldr	r3, L206+20
	ldr	r2, L206+4
	ldr	ip, [fp, #-28]
	ldr	lr, L206+4
	ldr	r4, [fp, #-24]
	ldr	r0, [r3, #0]
	ldr	r1, L206+16
	ldr	r2, [r2, ip, asl #2]
	ldr	r3, [lr, r4, asl #2]
	bl	fprintf
L204:
	ldr	r3, L206+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L205
	ldr	r1, L206+24
	ldr	r3, [fp, #-24]
	mov	r2, r3, asl #3
	ldr	r3, [fp, #-28]
	orr	r3, r2, r3
	orr	r3, r3, #192
	ldr	r0, [r1, #0]
	ldr	r1, L206+28
	mov	r2, r3
	bl	fprintf
L205:
	sub	r1, fp, #20
	ldr	r0, [r1, #0]
	mov	r3, r0
	mov	ip, r3
	ldr	r3, [fp, #-24]
	mov	r2, r3, asl #12
	ldr	r3, [fp, #-28]
	orr	r3, r2, r3
	orr	r3, r3, #-520093696
	orr	r3, r3, #10485760
	str	r3, [ip, #0]
	add	r0, r0, #4
	str	r0, [r1, #0]
	ldr	r3, [fp, #-20]
	mov	r0, r3
	ldmea	fp, {r4, fp, sp, pc}
L207:
	.align	0
L206:
	.word	f_tasm
	.word	reg_name_x86
	.word	LC87
	.word	f_asmi
	.word	LC88
	.word	f_asml
	.word	f_x86
	.word	LC89
	.section .rdata
	.align	0
LC90:
	.ascii	" mov dx,ax\n\000"
	.align	0
LC91:
	.ascii	" mov %%dx,%%ax\n\000"
	.align	0
LC92:
	.ascii	" mov %%ax,%%dx\n\000"
	.align	0
LC93:
	.ascii	" .byte 0x89, 0xC2\n\000"
	.text
	.align	0
	.global	_Z11c_mov_r1_r0Pi
_Z11c_mov_r1_r0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L213
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L209
	ldr	r3, L213
	ldr	r0, [r3, #0]
	ldr	r1, L213+4
	bl	fprintf
L209:
	ldr	r3, L213+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L210
	ldr	r3, L213+8
	ldr	r0, [r3, #0]
	ldr	r1, L213+12
	bl	fprintf
L210:
	ldr	r3, L213+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L211
	ldr	r3, L213+16
	ldr	r0, [r3, #0]
	ldr	r1, L213+20
	bl	fprintf
L211:
	ldr	r3, L213+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L212
	ldr	r3, L213+24
	ldr	r0, [r3, #0]
	ldr	r1, L213+28
	bl	fprintf
L212:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L213+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L214:
	.align	0
L213:
	.word	f_tasm
	.word	LC90
	.word	f_asmi
	.word	LC91
	.word	f_asml
	.word	LC92
	.word	f_x86
	.word	LC93
	.word	-509603840
	.section .rdata
	.align	0
LC94:
	.ascii	" mov cl,89h\n"
	.ascii	" mov [di],cl\n"
	.ascii	" inc di\n"
	.ascii	" mov cl,C3h\n"
	.ascii	" mov [di],cl\n"
	.ascii	" inc di\n\000"
	.align	0
LC95:
	.ascii	" mov %%cl,0x89\n"
	.ascii	" mov [%%di],%%cl\n"
	.ascii	" inc %%di\n"
	.ascii	" mov %%cl,0xC3\n"
	.ascii	" mov [%%di],%%cl\n"
	.ascii	" inc %%di\n\000"
	.align	0
LC96:
	.ascii	" mov $0x89,%%cl\n"
	.ascii	" mov %%cl,(%%di)\n"
	.ascii	" inc %%di\n"
	.ascii	" mov $0xC3,%%cl\n"
	.ascii	" mov %%cl,(%%di)\n"
	.ascii	" inc %%di\n\000"
	.align	0
LC97:
	.ascii	" .byte 0xB1, 0x89, 0x88, 0x0D, 0x47, 0xB1, 0xC2, 0x"
	.ascii	"88, 0x0D, 0x47\n\000"
	.text
	.align	0
	.global	_Z13c_q_mov_r1_r0Pi
_Z13c_q_mov_r1_r0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L220
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L216
	ldr	r3, L220
	ldr	r0, [r3, #0]
	ldr	r1, L220+4
	bl	fprintf
L216:
	ldr	r3, L220+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L217
	ldr	r3, L220+8
	ldr	r0, [r3, #0]
	ldr	r1, L220+12
	bl	fprintf
L217:
	ldr	r3, L220+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L218
	ldr	r3, L220+16
	ldr	r0, [r3, #0]
	ldr	r1, L220+20
	bl	fprintf
L218:
	ldr	r3, L220+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L219
	ldr	r3, L220+24
	ldr	r0, [r3, #0]
	ldr	r1, L220+28
	bl	fprintf
L219:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L220+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L220+36
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L220+40
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L220+44
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L221:
	.align	0
L220:
	.word	f_tasm
	.word	LC94
	.word	f_asmi
	.word	LC95
	.word	f_asml
	.word	LC96
	.word	f_x86
	.word	LC97
	.word	-442527744
	.word	-509603840
	.word	-443772928
	.word	-494092284
	.section .rdata
	.align	0
LC98:
	.ascii	" mov ax,[si]\n\000"
	.align	0
LC99:
	.ascii	" mov %%ax,[%%si]\n\000"
	.align	0
LC100:
	.ascii	" mov (%%si),%%ax\n\000"
	.align	0
LC101:
	.ascii	" .byte 0x8B, 0x04\n\000"
	.text
	.align	0
	.global	_Z16c_mov_r0_cont_raPi
_Z16c_mov_r0_cont_raPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L227
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L223
	ldr	r3, L227
	ldr	r0, [r3, #0]
	ldr	r1, L227+4
	bl	fprintf
L223:
	ldr	r3, L227+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L224
	ldr	r3, L227+8
	ldr	r0, [r3, #0]
	ldr	r1, L227+12
	bl	fprintf
L224:
	ldr	r3, L227+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L225
	ldr	r3, L227+16
	ldr	r0, [r3, #0]
	ldr	r1, L227+20
	bl	fprintf
L225:
	ldr	r3, L227+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L226
	ldr	r3, L227+24
	ldr	r0, [r3, #0]
	ldr	r1, L227+28
	bl	fprintf
L226:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L227+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L228:
	.align	0
L227:
	.word	f_tasm
	.word	LC98
	.word	f_asmi
	.word	LC99
	.word	f_asml
	.word	LC100
	.word	f_x86
	.word	LC101
	.word	-442892288
	.section .rdata
	.align	0
LC102:
	.ascii	" mov al,[byte ptr si]\n"
	.ascii	"mov ah,0\n\000"
	.align	0
LC103:
	.ascii	" .byte 0x8A, 0x04, 0xB4, 0x00\n\000"
	.text
	.align	0
	.global	_Z21c_mov_r0_byte_cont_raPi
_Z21c_mov_r0_byte_cont_raPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L232
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L230
	ldr	r3, L232
	ldr	r0, [r3, #0]
	ldr	r1, L232+4
	bl	fprintf
L230:
	ldr	r3, L232+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L231
	ldr	r3, L232+8
	ldr	r0, [r3, #0]
	ldr	r1, L232+12
	bl	fprintf
L231:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L232+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L233:
	.align	0
L232:
	.word	f_tasm
	.word	LC102
	.word	f_x86
	.word	LC103
	.word	-447086592
	.section .rdata
	.align	0
LC104:
	.ascii	" mov si,[si]\n\000"
	.align	0
LC105:
	.ascii	" mov %%si,[%%si]\n\000"
	.align	0
LC106:
	.ascii	" mov (%%si),%%si\n\000"
	.align	0
LC107:
	.ascii	" .byte 0x8B, 0x34\n\000"
	.text
	.align	0
	.global	_Z16c_mov_ra_cont_raPi
_Z16c_mov_ra_cont_raPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L239
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L235
	ldr	r3, L239
	ldr	r0, [r3, #0]
	ldr	r1, L239+4
	bl	fprintf
L235:
	ldr	r3, L239+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L236
	ldr	r3, L239+8
	ldr	r0, [r3, #0]
	ldr	r1, L239+12
	bl	fprintf
L236:
	ldr	r3, L239+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L237
	ldr	r3, L239+16
	ldr	r0, [r3, #0]
	ldr	r1, L239+20
	bl	fprintf
L237:
	ldr	r3, L239+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L238
	ldr	r3, L239+24
	ldr	r0, [r3, #0]
	ldr	r1, L239+28
	bl	fprintf
L238:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L239+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L240:
	.align	0
L239:
	.word	f_tasm
	.word	LC104
	.word	f_asmi
	.word	LC105
	.word	f_asml
	.word	LC106
	.word	f_x86
	.word	LC107
	.word	-442851328
	.section .rdata
	.align	0
LC108:
	.ascii	" mov [si],ax\n\000"
	.align	0
LC109:
	.ascii	" mov [%%si],%%ax\n\000"
	.align	0
LC110:
	.ascii	" mov %%ax,(%%si)\n\000"
	.align	0
LC111:
	.ascii	" .byte 0x89, 0x04\n\000"
	.text
	.align	0
	.global	_Z16c_mov_cont_ra_r0Pi
_Z16c_mov_cont_ra_r0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L246
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L242
	ldr	r3, L246
	ldr	r0, [r3, #0]
	ldr	r1, L246+4
	bl	fprintf
L242:
	ldr	r3, L246+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L243
	ldr	r3, L246+8
	ldr	r0, [r3, #0]
	ldr	r1, L246+12
	bl	fprintf
L243:
	ldr	r3, L246+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L244
	ldr	r3, L246+16
	ldr	r0, [r3, #0]
	ldr	r1, L246+20
	bl	fprintf
L244:
	ldr	r3, L246+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L245
	ldr	r3, L246+24
	ldr	r0, [r3, #0]
	ldr	r1, L246+28
	bl	fprintf
L245:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L246+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L247:
	.align	0
L246:
	.word	f_tasm
	.word	LC108
	.word	f_asmi
	.word	LC109
	.word	f_asml
	.word	LC110
	.word	f_x86
	.word	LC111
	.word	-443940864
	.section .rdata
	.align	0
LC112:
	.ascii	" mov [byte ptr si],al\n\000"
	.align	0
LC113:
	.ascii	" .byte 0x88, 0x04\n\000"
	.text
	.align	0
	.global	_Z21c_mov_byte_cont_ra_r0Pi
_Z21c_mov_byte_cont_ra_r0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L251
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L249
	ldr	r3, L251
	ldr	r0, [r3, #0]
	ldr	r1, L251+4
	bl	fprintf
L249:
	ldr	r3, L251+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L250
	ldr	r3, L251+8
	ldr	r0, [r3, #0]
	ldr	r1, L251+12
	bl	fprintf
L250:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L251+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L252:
	.align	0
L251:
	.word	f_tasm
	.word	LC112
	.word	f_x86
	.word	LC113
	.word	-448135168
	.section .rdata
	.align	0
LC114:
	.ascii	" mov ax,[si+0%Xh]\n\000"
	.align	0
LC115:
	.ascii	" mov %%ax,[%%si+0x%X]\n\000"
	.align	0
LC116:
	.ascii	" mov (%%si+0x%X),%%ax\n\000"
	.align	0
LC117:
	.ascii	" .byte 0x8B, 0x44, 0x%X\n\000"
	.text
	.align	0
	.global	_Z24c_mov_r0_cont_ra_plus_imPii
_Z24c_mov_r0_cont_ra_plus_imPii:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r3, L258
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L254
	ldr	r3, L258
	ldr	r0, [r3, #0]
	ldr	r1, L258+4
	ldr	r2, [fp, #-20]
	bl	fprintf
L254:
	ldr	r3, L258+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L255
	ldr	r3, L258+8
	ldr	r0, [r3, #0]
	ldr	r1, L258+12
	ldr	r2, [fp, #-20]
	bl	fprintf
L255:
	ldr	r3, L258+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L256
	ldr	r3, L258+16
	ldr	r0, [r3, #0]
	ldr	r1, L258+20
	ldr	r2, [fp, #-20]
	bl	fprintf
L256:
	ldr	r3, L258+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L257
	ldr	r3, L258+24
	ldr	r0, [r3, #0]
	ldr	r1, L258+28
	ldr	r2, [fp, #-20]
	bl	fprintf
L257:
	sub	r1, fp, #16
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, [fp, #-20]
	orr	r3, r3, #-452984832
	orr	r3, r3, #10092544
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L259:
	.align	0
L258:
	.word	f_tasm
	.word	LC114
	.word	f_asmi
	.word	LC115
	.word	f_asml
	.word	LC116
	.word	f_x86
	.word	LC117
	.section .rdata
	.align	0
LC118:
	.ascii	" mov [si+%Xh],ax\n\000"
	.align	0
LC119:
	.ascii	" mov [%%si+0x%X],%%ax\n\000"
	.align	0
LC120:
	.ascii	" mov %%ax,(%%si+0x%X)\n\000"
	.align	0
LC121:
	.ascii	" .byte 0x89, 0x44; 0x%X\n\000"
	.text
	.align	0
	.global	_Z24c_mov_cont_ra_plus_im_r0Pii
_Z24c_mov_cont_ra_plus_im_r0Pii:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r3, L265
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L261
	ldr	r3, L265
	ldr	r0, [r3, #0]
	ldr	r1, L265+4
	ldr	r2, [fp, #-20]
	bl	fprintf
L261:
	ldr	r3, L265+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L262
	ldr	r3, L265+8
	ldr	r0, [r3, #0]
	ldr	r1, L265+12
	ldr	r2, [fp, #-20]
	bl	fprintf
L262:
	ldr	r3, L265+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L263
	ldr	r3, L265+16
	ldr	r0, [r3, #0]
	ldr	r1, L265+20
	ldr	r2, [fp, #-20]
	bl	fprintf
L263:
	ldr	r3, L265+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L264
	ldr	r3, L265+24
	ldr	r0, [r3, #0]
	ldr	r1, L265+28
	ldr	r2, [fp, #-20]
	bl	fprintf
L264:
	sub	r1, fp, #16
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, [fp, #-20]
	orr	r3, r3, #-452984832
	orr	r3, r3, #9043968
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L266:
	.align	0
L265:
	.word	f_tasm
	.word	LC118
	.word	f_asmi
	.word	LC119
	.word	f_asml
	.word	LC120
	.word	f_x86
	.word	LC121
	.section .rdata
	.align	0
LC122:
	.ascii	" mov ax,[bx]\n"
	.ascii	" add bx,2\n\000"
	.text
	.align	0
	.global	_Z20c_mov_r0_cont_rb_incPi
_Z20c_mov_r0_cont_rb_incPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L269
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L268
	ldr	r3, L269
	ldr	r0, [r3, #0]
	ldr	r1, L269+4
	bl	fprintf
L268:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L269+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L270:
	.align	0
L269:
	.word	f_tasm
	.word	LC122
	.word	-390397951
	.section .rdata
	.align	0
LC123:
	.ascii	" sub bx,2\n"
	.ascii	" mov [bx],ax\n\000"
	.text
	.align	0
	.global	_Z20c_mov_cont_dec_rb_r0Pi
_Z20c_mov_cont_dec_rb_r0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L273
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L272
	ldr	r3, L273
	ldr	r0, [r3, #0]
	ldr	r1, L273+4
	bl	fprintf
L272:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L273+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L274:
	.align	0
L273:
	.word	f_tasm
	.word	LC123
	.word	-383057919
	.section .rdata
	.align	0
LC124:
	.ascii	" mov dx,[bx]\n"
	.ascii	" add bx,2\n\000"
	.text
	.align	0
	.global	_Z20c_mov_r1_cont_rb_incPi
_Z20c_mov_r1_cont_rb_incPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L277
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L276
	ldr	r3, L277
	ldr	r0, [r3, #0]
	ldr	r1, L277+4
	bl	fprintf
L276:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L277+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L278:
	.align	0
L277:
	.word	f_tasm
	.word	LC124
	.word	-390397950
	.section .rdata
	.align	0
LC125:
	.ascii	" mov si,[bx]\n"
	.ascii	" add bx,2\n\000"
	.text
	.align	0
	.global	_Z20c_mov_ra_cont_rb_incPi
_Z20c_mov_ra_cont_rb_incPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L281
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L280
	ldr	r3, L281
	ldr	r0, [r3, #0]
	ldr	r1, L281+4
	bl	fprintf
L280:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L281+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L282:
	.align	0
L281:
	.word	f_tasm
	.word	LC125
	.word	-390396928
	.section .rdata
	.align	0
LC126:
	.ascii	" sub bx,2\n"
	.ascii	" mov [bx],dx\n\000"
	.text
	.align	0
	.global	_Z20c_mov_cont_dec_rb_r1Pi
_Z20c_mov_cont_dec_rb_r1Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L285
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L284
	ldr	r3, L285
	ldr	r0, [r3, #0]
	ldr	r1, L285+4
	bl	fprintf
L284:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L285+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L286:
	.align	0
L285:
	.word	f_tasm
	.word	LC126
	.word	-383057918
	.section .rdata
	.align	0
LC127:
	.ascii	" mov [di],ax\n"
	.ascii	" inc di\n\000"
	.text
	.align	0
	.global	_Z20c_mov_cont_rc_inc_r0Pi
_Z20c_mov_cont_rc_inc_r0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L289
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L288
	ldr	r3, L289
	ldr	r0, [r3, #0]
	ldr	r1, L289+4
	bl	fprintf
L288:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L289+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L290:
	.align	0
L289:
	.word	f_tasm
	.word	LC127
	.word	-391380991
	.section .rdata
	.align	0
LC128:
	.ascii	" add ax,dx\n\000"
	.align	0
LC129:
	.ascii	" add %%ax,%%dx\n\000"
	.align	0
LC130:
	.ascii	" add %%dx,%%ax\n\000"
	.align	0
LC131:
	.ascii	" .byte 0x01, 0xD0\n\000"
	.text
	.align	0
	.global	_Z11c_add_r0_r1Pi
_Z11c_add_r0_r1Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L296
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L292
	ldr	r3, L296
	ldr	r0, [r3, #0]
	ldr	r1, L296+4
	bl	fprintf
L292:
	ldr	r3, L296+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L293
	ldr	r3, L296+8
	ldr	r0, [r3, #0]
	ldr	r1, L296+12
	bl	fprintf
L293:
	ldr	r3, L296+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L294
	ldr	r3, L296+16
	ldr	r0, [r3, #0]
	ldr	r1, L296+20
	bl	fprintf
L294:
	ldr	r3, L296+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L295
	ldr	r3, L296+24
	ldr	r0, [r3, #0]
	ldr	r1, L296+28
	bl	fprintf
L295:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L296+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L297:
	.align	0
L296:
	.word	f_tasm
	.word	LC128
	.word	f_asmi
	.word	LC129
	.word	f_asml
	.word	LC130
	.word	f_x86
	.word	LC131
	.word	-528482303
	.section .rdata
	.align	0
LC132:
	.ascii	" sub ax,dx\n\000"
	.align	0
LC133:
	.ascii	" sub %%ax,%%dx\n\000"
	.align	0
LC134:
	.ascii	" sub %%dx,%%ax\n\000"
	.align	0
LC135:
	.ascii	" .byte 0x29, 0xD0\n\000"
	.text
	.align	0
	.global	_Z11c_sub_r0_r1Pi
_Z11c_sub_r0_r1Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L303
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L299
	ldr	r3, L303
	ldr	r0, [r3, #0]
	ldr	r1, L303+4
	bl	fprintf
L299:
	ldr	r3, L303+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L300
	ldr	r3, L303+8
	ldr	r0, [r3, #0]
	ldr	r1, L303+12
	bl	fprintf
L300:
	ldr	r3, L303+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L301
	ldr	r3, L303+16
	ldr	r0, [r3, #0]
	ldr	r1, L303+20
	bl	fprintf
L301:
	ldr	r3, L303+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L302
	ldr	r3, L303+24
	ldr	r0, [r3, #0]
	ldr	r1, L303+28
	bl	fprintf
L302:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L303+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L304:
	.align	0
L303:
	.word	f_tasm
	.word	LC132
	.word	f_asmi
	.word	LC133
	.word	f_asml
	.word	LC134
	.word	f_x86
	.word	LC135
	.word	-532676607
	.section .rdata
	.align	0
LC136:
	.ascii	" cmp ax,0\n"
	.ascii	" jge %s\n\000"
	.align	0
LC137:
	.ascii	" cmp %%ax,0\n"
	.ascii	" jge %s\n\000"
	.align	0
LC138:
	.ascii	" .byte 0x3D, 0, 0\n"
	.ascii	" jge %s\n\000"
	.text
	.align	0
	.global	_Z9c_bp_deplPii
_Z9c_bp_deplPii:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r3, L310
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L306
	ldr	r3, L310
	ldr	r0, [r3, #0]
	ldr	r1, L310+4
	ldr	r2, L310+8
	bl	fprintf
L306:
	ldr	r3, L310+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L307
	ldr	r3, L310+12
	ldr	r0, [r3, #0]
	ldr	r1, L310+16
	ldr	r2, L310+8
	bl	fprintf
L307:
	ldr	r3, L310+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L308
	ldr	r3, L310+20
	ldr	r0, [r3, #0]
	ldr	r1, L310+16
	ldr	r2, L310+8
	bl	fprintf
L308:
	ldr	r3, L310+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L309
	ldr	r3, L310+24
	ldr	r0, [r3, #0]
	ldr	r1, L310+28
	ldr	r2, L310+8
	bl	fprintf
L309:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L310+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r1, fp, #16
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, [fp, #-20]
	add	r3, r3, #1509949440
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L311:
	.align	0
L310:
	.word	f_tasm
	.word	LC136
	.word	last_label
	.word	f_asmi
	.word	LC137
	.word	f_asml
	.word	f_x86
	.word	LC138
	.word	-508559360
	.section .rdata
	.align	0
LC139:
	.ascii	" cmp ax,0\n"
	.ascii	" je %s\n\000"
	.align	0
LC140:
	.ascii	" cmp %%ax,0\n"
	.ascii	" je %s\n\000"
	.align	0
LC141:
	.ascii	" .byte 0x3D, 0, 0\n"
	.ascii	" je %s\n\000"
	.text
	.align	0
	.global	_Z9c_bz_deplPii
_Z9c_bz_deplPii:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r3, L317
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L313
	ldr	r3, L317
	ldr	r0, [r3, #0]
	ldr	r1, L317+4
	ldr	r2, L317+8
	bl	fprintf
L313:
	ldr	r3, L317+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L314
	ldr	r3, L317+12
	ldr	r0, [r3, #0]
	ldr	r1, L317+16
	ldr	r2, L317+8
	bl	fprintf
L314:
	ldr	r3, L317+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L315
	ldr	r3, L317+20
	ldr	r0, [r3, #0]
	ldr	r1, L317+16
	ldr	r2, L317+8
	bl	fprintf
L315:
	ldr	r3, L317+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L316
	ldr	r3, L317+24
	ldr	r0, [r3, #0]
	ldr	r1, L317+28
	ldr	r2, L317+8
	bl	fprintf
L316:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L317+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r1, fp, #16
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, [fp, #-20]
	add	r3, r3, #167772160
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L318:
	.align	0
L317:
	.word	f_tasm
	.word	LC139
	.word	last_label
	.word	f_asmi
	.word	LC140
	.word	f_asml
	.word	f_x86
	.word	LC141
	.word	-508559360
	.section .rdata
	.align	0
LC142:
	.ascii	" mov cx,ax\n"
	.ascii	" sub cx,si\n"
	.ascii	" sub cx,5\n"
	.ascii	" mov [byte ptr si+4],cl\n\000"
	.text
	.align	0
	.global	_Z10c_setbradrPi
_Z10c_setbradrPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L321
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L320
	ldr	r3, L321
	ldr	r0, [r3, #0]
	ldr	r1, L321+4
	bl	fprintf
L320:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L321+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L321+12
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L321+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L321+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L321+24
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-369098752
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-16777216
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L321+28
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L321+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L321+36
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r0, [fp, #-16]
	ldr	r1, L321+40
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L322:
	.align	0
L321:
	.word	f_tasm
	.word	LC142
	.word	-532639734
	.word	-498495476
	.word	-509570743
	.word	-442859516
	.word	-442535936
	.word	-536313849
	.word	-527925239
	.word	-443908092
	.word	_Z12f_dummyprintv
	.global	label_tasm
	.data
	.align	0
label_tasm:
	.word	0
	.global	label_asmi
	.align	0
label_asmi:
	.word	0
	.global	label_asml
	.align	0
label_asml:
	.word	0
	.section .rdata
	.align	0
LC143:
	.ascii	" cmp ax,0\n"
	.ascii	" jl l%d\n"
	.ascii	" jmp si\n"
	.ascii	"l%d:\n\000"
	.align	0
LC144:
	.ascii	" cmp %%ax,0\n"
	.ascii	" jl l%d\n"
	.ascii	" jmp %%si\n"
	.ascii	"l%d:\n\000"
	.align	0
LC145:
	.ascii	" cmp %%ax,0\n"
	.ascii	" jl l%d\n"
	.ascii	" jmp *%%si\n"
	.ascii	"l%d:\n\000"
	.align	0
LC146:
	.ascii	" .byte 0x3D, 0, 0, 0x7C, 2, 0xFF, 0xE6\n\000"
	.text
	.align	0
	.global	_Z7c_bp_raPi
_Z7c_bp_raPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L328
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L324
	ldr	r2, L328+4
	ldr	r3, L328+4
	ldr	r3, [r3, #0]
	add	r3, r3, #1
	str	r3, [r2, #0]
	ldr	r3, L328
	ldr	r2, L328+4
	ldr	ip, L328+4
	ldr	r0, [r3, #0]
	ldr	r1, L328+8
	ldr	r2, [r2, #0]
	ldr	r3, [ip, #0]
	bl	fprintf
L324:
	ldr	r3, L328+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L325
	ldr	r2, L328+16
	ldr	r3, L328+16
	ldr	r3, [r3, #0]
	add	r3, r3, #1
	str	r3, [r2, #0]
	ldr	r3, L328+12
	ldr	r2, L328+16
	ldr	ip, L328+16
	ldr	r0, [r3, #0]
	ldr	r1, L328+20
	ldr	r2, [r2, #0]
	ldr	r3, [ip, #0]
	bl	fprintf
L325:
	ldr	r3, L328+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L326
	ldr	r2, L328+28
	ldr	r3, L328+28
	ldr	r3, [r3, #0]
	add	r3, r3, #1
	str	r3, [r2, #0]
	ldr	r3, L328+24
	ldr	r2, L328+28
	ldr	ip, L328+28
	ldr	r0, [r3, #0]
	ldr	r1, L328+32
	ldr	r2, [r2, #0]
	ldr	r3, [ip, #0]
	bl	fprintf
L326:
	ldr	r3, L328+36
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L327
	ldr	r3, L328+36
	ldr	r0, [r3, #0]
	ldr	r1, L328+40
	bl	fprintf
L327:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L328+44
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L328+48
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L329:
	.align	0
L328:
	.word	f_tasm
	.word	label_tasm
	.word	LC143
	.word	f_asmi
	.word	label_asmi
	.word	LC144
	.word	f_asml
	.word	label_asml
	.word	LC145
	.word	f_x86
	.word	LC146
	.word	-508559360
	.word	1369501706
	.section .rdata
	.align	0
LC147:
	.ascii	" cmp ax,0\n"
	.ascii	" jne l%d\n"
	.ascii	" jmp si\n"
	.ascii	"l%d:\n\000"
	.align	0
LC148:
	.ascii	" cmp %%ax,0\n"
	.ascii	" jne l%d\n"
	.ascii	" jmp %%si\n"
	.ascii	"l%d:\n\000"
	.align	0
LC149:
	.ascii	" cmp %%ax,0\n"
	.ascii	" jne l%d\n"
	.ascii	" jmp *%%si\n"
	.ascii	"l%d:\n\000"
	.align	0
LC150:
	.ascii	" .byte 0x3D, 0, 0, 0x75, 2, 0xFF, 0xE6\n\000"
	.text
	.align	0
	.global	_Z7c_bz_raPi
_Z7c_bz_raPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L335
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L331
	ldr	r2, L335+4
	ldr	r3, L335+4
	ldr	r3, [r3, #0]
	add	r3, r3, #1
	str	r3, [r2, #0]
	ldr	r3, L335
	ldr	r2, L335+4
	ldr	ip, L335+4
	ldr	r0, [r3, #0]
	ldr	r1, L335+8
	ldr	r2, [r2, #0]
	ldr	r3, [ip, #0]
	bl	fprintf
L331:
	ldr	r3, L335+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L332
	ldr	r2, L335+16
	ldr	r3, L335+16
	ldr	r3, [r3, #0]
	add	r3, r3, #1
	str	r3, [r2, #0]
	ldr	r3, L335+12
	ldr	r2, L335+16
	ldr	ip, L335+16
	ldr	r0, [r3, #0]
	ldr	r1, L335+20
	ldr	r2, [r2, #0]
	ldr	r3, [ip, #0]
	bl	fprintf
L332:
	ldr	r3, L335+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L333
	ldr	r2, L335+28
	ldr	r3, L335+28
	ldr	r3, [r3, #0]
	add	r3, r3, #1
	str	r3, [r2, #0]
	ldr	r3, L335+24
	ldr	r2, L335+28
	ldr	ip, L335+28
	ldr	r0, [r3, #0]
	ldr	r1, L335+32
	ldr	r2, [r2, #0]
	ldr	r3, [ip, #0]
	bl	fprintf
L333:
	ldr	r3, L335+36
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L334
	ldr	r3, L335+36
	ldr	r0, [r3, #0]
	ldr	r1, L335+40
	bl	fprintf
L334:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L335+44
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L335+48
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L336:
	.align	0
L335:
	.word	f_tasm
	.word	label_tasm
	.word	LC147
	.word	f_asmi
	.word	label_asmi
	.word	LC148
	.word	f_asml
	.word	label_asml
	.word	LC149
	.word	f_x86
	.word	LC150
	.word	-508559360
	.word	27324426
	.align	0
	.global	_Z7c_bz_r1Pi
_Z7c_bz_r1Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L338
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L338+4
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L339:
	.align	0
L338:
	.word	-508559360
	.word	27324417
	.section .rdata
	.align	0
LC151:
	.ascii	" call %s\n\000"
	.text
	.align	0
	.global	_Z11c_call_deplPii
_Z11c_call_deplPii:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r3, L345
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L341
	ldr	r3, L345
	ldr	r0, [r3, #0]
	ldr	r1, L345+4
	ldr	r2, L345+8
	bl	fprintf
L341:
	ldr	r3, L345+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L342
	ldr	r3, L345+12
	ldr	r0, [r3, #0]
	ldr	r1, L345+4
	ldr	r2, L345+8
	bl	fprintf
L342:
	ldr	r3, L345+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L343
	ldr	r3, L345+16
	ldr	r0, [r3, #0]
	ldr	r1, L345+4
	ldr	r2, L345+8
	bl	fprintf
L343:
	ldr	r3, L345+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L344
	ldr	r3, L345+20
	ldr	r0, [r3, #0]
	ldr	r1, L345+4
	ldr	r2, L345+8
	bl	fprintf
L344:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L345+24
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r1, fp, #16
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, [fp, #-20]
	add	r3, r3, #-352321536
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L346:
	.align	0
L345:
	.word	f_tasm
	.word	LC151
	.word	last_label
	.word	f_asmi
	.word	f_asml
	.word	f_x86
	.word	-509550577
	.align	0
	.global	_Z13c_q_call_imr0Pi
_Z13c_q_call_imr0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
	.section .rdata
	.align	0
LC152:
	.ascii	" call si\n\000"
	.align	0
LC153:
	.ascii	" call %%si\n\000"
	.align	0
LC154:
	.ascii	" call *%%si\n\000"
	.align	0
LC155:
	.ascii	" .byte 0xFF, 0xD6\n\000"
	.text
	.align	0
	.global	_Z9c_call_raPi
_Z9c_call_raPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L353
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L349
	ldr	r3, L353
	ldr	r0, [r3, #0]
	ldr	r1, L353+4
	bl	fprintf
L349:
	ldr	r3, L353+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L350
	ldr	r3, L353+8
	ldr	r0, [r3, #0]
	ldr	r1, L353+12
	bl	fprintf
L350:
	ldr	r3, L353+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L351
	ldr	r3, L353+16
	ldr	r0, [r3, #0]
	ldr	r1, L353+20
	bl	fprintf
L351:
	ldr	r3, L353+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L352
	ldr	r3, L353+24
	ldr	r0, [r3, #0]
	ldr	r1, L353+28
	bl	fprintf
L352:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L353+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L353+36
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L354:
	.align	0
L353:
	.word	f_tasm
	.word	LC152
	.word	f_asmi
	.word	LC153
	.word	f_asml
	.word	LC154
	.word	f_x86
	.word	LC155
	.word	-509550577
	.word	-509546486
	.align	0
	.global	_Z12c_callext_raPi
_Z12c_callext_raPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L360
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L356
	ldr	r3, L360
	ldr	r0, [r3, #0]
	ldr	r1, L360+4
	bl	fprintf
L356:
	ldr	r3, L360+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L357
	ldr	r3, L360+8
	ldr	r0, [r3, #0]
	ldr	r1, L360+12
	bl	fprintf
L357:
	ldr	r3, L360+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L358
	ldr	r3, L360+16
	ldr	r0, [r3, #0]
	ldr	r1, L360+20
	bl	fprintf
L358:
	ldr	r3, L360+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L359
	ldr	r3, L360+24
	ldr	r0, [r3, #0]
	ldr	r1, L360+28
	bl	fprintf
L359:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L360+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L360+36
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L361:
	.align	0
L360:
	.word	f_tasm
	.word	LC152
	.word	f_asmi
	.word	LC153
	.word	f_asml
	.word	LC154
	.word	f_x86
	.word	LC155
	.word	-509550577
	.word	-509546486
	.align	0
	.global	_Z8c_beginfPi
_Z8c_beginfPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L363
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L364:
	.align	0
L363:
	.word	-382910464
	.section .rdata
	.align	0
LC156:
	.ascii	" ret\n\000"
	.text
	.align	0
	.global	_Z6c_endfPi
_Z6c_endfPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L367
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L366
	ldr	r3, L367
	ldr	r0, [r3, #0]
	ldr	r1, L367+4
	bl	fprintf
L366:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L367+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L368:
	.align	0
L367:
	.word	f_tasm
	.word	LC156
	.word	-390234112
	.section .rdata
	.align	0
LC157:
	.ascii	" .byte 0xC3\n\000"
	.text
	.align	0
	.global	_Z5c_retPi
_Z5c_retPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L374
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L370
	ldr	r3, L374
	ldr	r0, [r3, #0]
	ldr	r1, L374+4
	bl	fprintf
L370:
	ldr	r3, L374+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L371
	ldr	r3, L374+8
	ldr	r0, [r3, #0]
	ldr	r1, L374+4
	bl	fprintf
L371:
	ldr	r3, L374+12
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L372
	ldr	r3, L374+12
	ldr	r0, [r3, #0]
	ldr	r1, L374+4
	bl	fprintf
L372:
	ldr	r3, L374+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L373
	ldr	r3, L374+16
	ldr	r0, [r3, #0]
	ldr	r1, L374+20
	bl	fprintf
L373:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L374+24
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L375:
	.align	0
L374:
	.word	f_tasm
	.word	LC156
	.word	f_asmi
	.word	f_asml
	.word	f_x86
	.word	LC157
	.word	-509546482
	.section .rdata
	.align	0
LC158:
	.ascii	" ror ax,1\n\000"
	.align	0
LC159:
	.ascii	" ror %%ax,1\n\000"
	.align	0
LC160:
	.ascii	" ror %%ax,$1\n\000"
	.align	0
LC161:
	.ascii	" .byte 0xD1, 0xC8\n\000"
	.text
	.align	0
	.global	_Z8c_ror_r0Pi
_Z8c_ror_r0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L381
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L377
	ldr	r3, L381
	ldr	r0, [r3, #0]
	ldr	r1, L381+4
	bl	fprintf
L377:
	ldr	r3, L381+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L378
	ldr	r3, L381+8
	ldr	r0, [r3, #0]
	ldr	r1, L381+12
	bl	fprintf
L378:
	ldr	r3, L381+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L379
	ldr	r3, L381+16
	ldr	r0, [r3, #0]
	ldr	r1, L381+20
	bl	fprintf
L379:
	ldr	r3, L381+24
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L380
	ldr	r3, L381+24
	ldr	r0, [r3, #0]
	ldr	r1, L381+28
	bl	fprintf
L380:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L381+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L382:
	.align	0
L381:
	.word	f_tasm
	.word	LC158
	.word	f_asmi
	.word	LC159
	.word	f_asml
	.word	LC160
	.word	f_x86
	.word	LC161
	.word	-509607776
	.section .rdata
	.align	0
LC162:
	.ascii	" sar ax,1\n\000"
	.text
	.align	0
	.global	_Z8c_asr_r0Pi
_Z8c_asr_r0Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L385
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L384
	ldr	r3, L385
	ldr	r0, [r3, #0]
	ldr	r1, L385+4
	bl	fprintf
L384:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L385+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L386:
	.align	0
L385:
	.word	f_tasm
	.word	LC162
	.word	-509607744
	.section .rdata
	.align	0
LC163:
	.ascii	" and ax,dx\n\000"
	.align	0
LC164:
	.ascii	" and %%ax,%%dx\n\000"
	.align	0
LC165:
	.ascii	" .byte 0x21, 0xD0\n\000"
	.text
	.align	0
	.global	_Z11c_and_r0_r1Pi
_Z11c_and_r0_r1Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L392
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L388
	ldr	r3, L392
	ldr	r0, [r3, #0]
	ldr	r1, L392+4
	bl	fprintf
L388:
	ldr	r3, L392+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L389
	ldr	r3, L392+8
	ldr	r0, [r3, #0]
	ldr	r1, L392+12
	bl	fprintf
L389:
	ldr	r3, L392+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L390
	ldr	r3, L392+16
	ldr	r0, [r3, #0]
	ldr	r1, L392+12
	bl	fprintf
L390:
	ldr	r3, L392+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L391
	ldr	r3, L392+20
	ldr	r0, [r3, #0]
	ldr	r1, L392+24
	bl	fprintf
L391:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #-536870911
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L393:
	.align	0
L392:
	.word	f_tasm
	.word	LC163
	.word	f_asmi
	.word	LC164
	.word	f_asml
	.word	f_x86
	.word	LC165
	.section .rdata
	.align	0
LC166:
	.ascii	" xor ax,dx\n\000"
	.align	0
LC167:
	.ascii	" xor %%ax,%%dx\n\000"
	.align	0
LC168:
	.ascii	" .byte 0x31, 0xD0\n\000"
	.text
	.align	0
	.global	_Z11c_xor_r0_r1Pi
_Z11c_xor_r0_r1Pi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L399
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L395
	ldr	r3, L399
	ldr	r0, [r3, #0]
	ldr	r1, L399+4
	bl	fprintf
L395:
	ldr	r3, L399+8
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L396
	ldr	r3, L399+8
	ldr	r0, [r3, #0]
	ldr	r1, L399+12
	bl	fprintf
L396:
	ldr	r3, L399+16
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L397
	ldr	r3, L399+16
	ldr	r0, [r3, #0]
	ldr	r1, L399+12
	bl	fprintf
L397:
	ldr	r3, L399+20
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L398
	ldr	r3, L399+20
	ldr	r0, [r3, #0]
	ldr	r1, L399+24
	bl	fprintf
L398:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L399+28
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L400:
	.align	0
L399:
	.word	f_tasm
	.word	LC166
	.word	f_asmi
	.word	LC167
	.word	f_asml
	.word	f_x86
	.word	LC168
	.word	-534773759
	.align	0
	.global	_Z6f_exitv
_Z6f_exitv:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	mov	r0, #0
	bl	exit
	.section .rdata
	.align	0
LC169:
	.ascii	" mov ax,0\n"
	.ascii	" int 21h\n\000"
	.text
	.align	0
	.global	_Z6c_exitPi
_Z6c_exitPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L404
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L403
	ldr	r3, L404
	ldr	r0, [r3, #0]
	ldr	r1, L404+4
	bl	fprintf
L403:
	ldr	r0, [fp, #-16]
	ldr	r1, L404+8
	bl	_Z13compile_call0PiPFivE
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L405:
	.align	0
L404:
	.word	f_tasm
	.word	LC169
	.word	_Z6f_exitv
	.global	fillmem
	.bss
	.align	0
fillmem:
	.space	4
	.global	fillmem_code
	.align	0
fillmem_code:
	.space	4000
	.global	lengthadr
	.align	0
lengthadr:
	.space	4
	.global	ncode
	.data
	.align	0
ncode:
	.word	0
	.section .rdata
	.align	0
LC170:
	.ascii	" lea bp,_fillmem\n"
	.ascii	" call bp\n\000"
	.align	0
LC171:
	.ascii	" db b%d-a%d\n"
	.ascii	"a%d:\n\000"
	.text
	.align	0
	.global	_Z6c_codePi
_Z6c_codePi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	ldr	r2, L408
	ldr	r3, L408
	ldr	r3, [r3, #0]
	add	r3, r3, #1
	str	r3, [r2, #0]
	ldr	r3, L408+4
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L407
	ldr	r3, L408+4
	ldr	r0, [r3, #0]
	ldr	r1, L408+8
	bl	fprintf
	ldr	r2, L408+4
	ldr	ip, L408
	ldr	lr, L408
	ldr	r3, L408
	ldr	r3, [r3, #0]
	str	r3, [sp, #0]
	ldr	r0, [r2, #0]
	ldr	r1, L408+12
	ldr	r2, [ip, #0]
	ldr	r3, [lr, #0]
	bl	fprintf
L407:
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L408+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L408+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r1, fp, #16
	ldr	r2, [r1, #0]
	mov	r3, r2
	mov	r0, r3
	ldr	r3, L408+24
	ldr	r3, [r3, #0]
	str	r3, [r0, #0]
	add	r2, r2, #4
	str	r2, [r1, #0]
	ldr	r2, L408+28
	ldr	r3, [fp, #-16]
	str	r3, [r2, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	mov	r3, #0
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L409:
	.align	0
L408:
	.word	ncode
	.word	f_tasm
	.word	LC170
	.word	LC171
	.word	-493887484
	.word	-450891772
	.word	fillmem
	.word	lengthadr
	.section .rdata
	.align	0
LC172:
	.ascii	"b%d:\n\000"
	.text
	.align	0
	.global	_Z9c_endcodePi
_Z9c_endcodePi:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	ldr	r3, L412
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L411
	ldr	r3, L412
	ldr	r2, L412+4
	ldr	r0, [r3, #0]
	ldr	r1, L412+8
	ldr	r2, [r2, #0]
	bl	fprintf
L411:
	ldr	r3, L412+12
	ldr	r2, [fp, #-16]
	ldr	r3, [r3, #0]
	rsb	r3, r3, r2
	mov	r3, r3, asr #2
	sub	r3, r3, #1
	str	r3, [fp, #-20]
	ldr	r3, L412+12
	ldr	r2, [r3, #0]
	ldr	r3, [fp, #-20]
	str	r3, [r2, #0]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L413:
	.align	0
L412:
	.word	f_tasm
	.word	ncode
	.word	LC172
	.word	lengthadr
	.section .rdata
	.align	0
LC173:
	.ascii	"dmpcode\000"
	.text
	.align	0
	.global	_Z10c_dumpcodePi
_Z10c_dumpcodePi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L416
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L415
	ldr	r0, L416+4
	bl	_Z12asm_call_extPc
L415:
	ldr	r0, [fp, #-16]
	ldr	r1, L416+8
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L417:
	.align	0
L416:
	.word	f_tasm
	.word	LC173
	.word	_Z7dmpcodev
	.align	0
	.global	_Z7initcvmv
_Z7initcvmv:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	ldmea	fp, {fp, sp, pc}
	.section .rdata
	.align	0
LC174:
	.ascii	"initcvm\000"
	.text
	.align	0
	.global	_Z9c_initcvmPi
_Z9c_initcvmPi:
	@ args = 0, pretend = 0, frame = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #4
	str	r0, [fp, #-16]
	ldr	r3, L421
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L420
	ldr	r0, L421+4
	bl	_Z12asm_call_extPc
L420:
	ldr	r0, [fp, #-16]
	ldr	r1, L421+8
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_callPiPFivEii
	mov	r3, r0
	str	r3, [fp, #-16]
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L422:
	.align	0
L421:
	.word	f_tasm
	.word	LC174
	.word	_Z7initcvmv
	.section .rdata
	.align	0
LC175:
	.ascii	" int 0%Xh\n\000"
	.text
	.align	0
	.global	_Z9c_intbiosPii
_Z9c_intbiosPii:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #8
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r3, L425
	ldr	r3, [r3, #0]
	cmp	r3, #0
	beq	L424
	ldr	r3, L425
	ldr	r0, [r3, #0]
	ldr	r1, L425+4
	ldr	r2, [fp, #-20]
	bl	fprintf
L424:
	ldr	r3, [fp, #-16]
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L426:
	.align	0
L425:
	.word	f_tasm
	.word	LC175
	.align	0
	.global	_Z9init_codev
_Z9init_codev:
	@ args = 0, pretend = 0, frame = 108
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #108
	ldr	r2, L428
	ldr	r3, L428+4
	str	r3, [r2, #0]
	ldr	r3, L428+4
	str	r3, [fp, #-16]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+8
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+12
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+20
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+24
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+28
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+32
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+16
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+36
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+40
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+44
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+48
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	sub	r0, fp, #16
	ldr	r2, [r0, #0]
	mov	r3, r2
	mov	r1, r3
	ldr	r3, L428+52
	str	r3, [r1, #0]
	add	r2, r2, #4
	str	r2, [r0, #0]
	ldmea	fp, {fp, sp, pc}
L429:
	.align	0
L428:
	.word	fillmem
	.word	fillmem_code
	.word	-382926845
	.word	-442630144
	.word	-493953020
	.word	-499122175
	.word	-508559360
	.word	-1174405116
	.word	-442626048
	.word	-443805696
	.word	-494092284
	.word	-352321545
	.word	-390266877
	.word	-509546482
	.global	gcp
	.bss
	.align	0
gcp:
	.space	4
	.section .rdata
	.align	0
LC176:
	.ascii	"Machine code:\n\000"
	.align	0
LC177:
	.ascii	"%X %08lX %c%c%c%c %s\n\000"
	.align	0
LC178:
	.ascii	"\n\000"
	.text
	.align	0
	.global	_Z7dmpcodev
_Z7dmpcodev:
	@ args = 0, pretend = 0, frame = 412
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #428
	ldr	r3, L436
	ldr	r3, [r3, #0]
	str	r3, [fp, #-416]
	ldr	r3, L436+4
	str	r3, [fp, #-424]
	ldr	r0, L436+8
	bl	printf
	mov	r3, #0
	str	r3, [fp, #-420]
L431:
	ldr	r3, L436
	ldr	r2, [r3, #0]
	ldr	r3, L436+4
	rsb	r3, r3, r2
	mov	r3, r3, asr #2
	mov	r2, r3
	ldr	r3, [fp, #-420]
	cmp	r3, r2
	blt	L434
	b	L432
L434:
	sub	r1, fp, #412
	ldr	r3, [fp, #-420]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-424]
	add	ip, r2, r3
	ldr	r3, [fp, #-420]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-424]
	add	r3, r2, r3
	mov	r0, r1
	ldr	r1, [ip, #0]
	mov	r2, r3
	bl	_Z8printasmPcjj
	ldr	r3, [fp, #-420]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-424]
	add	r1, r2, r3
	ldr	r3, [fp, #-420]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-424]
	add	ip, r2, r3
	ldr	r3, [fp, #-420]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-424]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	mov	lr, r3, asr #24
	ldr	r3, [fp, #-420]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-424]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	mov	r3, r3, asr #16
	str	r3, [sp, #0]
	ldr	r3, [fp, #-420]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-424]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	mov	r3, r3, asr #8
	str	r3, [sp, #4]
	ldr	r3, [fp, #-420]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-424]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	str	r3, [sp, #8]
	sub	r3, fp, #412
	str	r3, [sp, #12]
	ldr	r0, L436+12
	ldr	r2, [ip, #0]
	mov	r3, lr
	bl	printf
	ldr	r2, [fp, #-420]
	mov	r3, r2, asr #31
	mov	r3, r3, lsr #28
	add	r3, r2, r3
	mov	r3, r3, asr #4
	mov	r3, r3, asl #4
	rsb	r3, r3, r2
	cmp	r3, #15
	bne	L433
	sub	r3, fp, #112
	mov	r0, r3
	bl	gets
L433:
	ldr	r3, [fp, #-420]
	add	r3, r3, #1
	str	r3, [fp, #-420]
	b	L431
L432:
	ldr	r0, L436+16
	bl	printf
	ldmea	fp, {fp, sp, pc}
L437:
	.align	0
L436:
	.word	gcp
	.word	cod
	.word	LC176
	.word	LC177
	.word	LC178
	.section .rdata
	.align	0
LC179:
	.ascii	"\n"
	.ascii	"End of code dump\n\000"
	.text
	.align	0
	.global	_Z13dmpcodeadrlenii
_Z13dmpcodeadrlenii:
	@ args = 0, pretend = 0, frame = 424
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #440
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	ldr	r3, [fp, #-16]
	str	r3, [fp, #-436]
	ldr	r3, L444
	ldr	r3, [r3, #0]
	str	r3, [fp, #-424]
	ldr	r3, L444+4
	str	r3, [fp, #-432]
	ldr	r0, L444+8
	bl	printf
	mov	r3, #0
	str	r3, [fp, #-428]
L439:
	ldr	r3, L444
	ldr	r2, [r3, #0]
	ldr	r3, L444+4
	rsb	r3, r3, r2
	mov	r3, r3, asr #2
	mov	r2, r3
	ldr	r3, [fp, #-428]
	cmp	r3, r2
	blt	L442
	b	L440
L442:
	sub	r1, fp, #420
	ldr	r3, [fp, #-428]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-432]
	add	ip, r2, r3
	ldr	r3, [fp, #-428]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-432]
	add	r3, r2, r3
	mov	r0, r1
	ldr	r1, [ip, #0]
	mov	r2, r3
	bl	_Z8printasmPcjj
	ldr	r3, [fp, #-428]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-432]
	add	r1, r2, r3
	ldr	r3, [fp, #-428]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-432]
	add	ip, r2, r3
	ldr	r3, [fp, #-428]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-432]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	mov	lr, r3, asr #24
	ldr	r3, [fp, #-428]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-432]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	mov	r3, r3, asr #16
	str	r3, [sp, #0]
	ldr	r3, [fp, #-428]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-432]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	mov	r3, r3, asr #8
	str	r3, [sp, #4]
	ldr	r3, [fp, #-428]
	mov	r2, r3, asl #2
	ldr	r3, [fp, #-432]
	add	r3, r2, r3
	ldr	r3, [r3, #0]
	str	r3, [sp, #8]
	sub	r3, fp, #420
	str	r3, [sp, #12]
	ldr	r0, L444+12
	ldr	r2, [ip, #0]
	mov	r3, lr
	bl	printf
	ldr	r2, [fp, #-428]
	mov	r3, r2, asr #31
	mov	r3, r3, lsr #28
	add	r3, r2, r3
	mov	r3, r3, asr #4
	mov	r3, r3, asl #4
	rsb	r3, r3, r2
	cmp	r3, #15
	bne	L441
	sub	r3, fp, #120
	mov	r0, r3
	bl	gets
L441:
	ldr	r3, [fp, #-428]
	add	r3, r3, #1
	str	r3, [fp, #-428]
	b	L439
L440:
	ldr	r0, L444+16
	bl	printf
	ldr	r0, L444+20
	bl	printf
	ldmea	fp, {fp, sp, pc}
L445:
	.align	0
L444:
	.word	gcp
	.word	cod
	.word	LC176
	.word	LC177
	.word	LC178
	.word	LC179
	.global	mode
	.bss
mode:
	.space	1
	.section .rdata
	.align	0
LC180:
	.ascii	"First pass\n\000"
	.align	0
LC181:
	.ascii	"cvm.txt\000"
	.align	0
LC182:
	.ascii	"Program size: %u = 0x%X instructions\n\000"
	.align	0
LC183:
	.ascii	"Second pass\n\000"
	.align	0
LC184:
	.ascii	"cvm.asm\000"
	.align	0
LC185:
	.ascii	"Done\n\000"
	.text
	.align	0
	.global	main
main:
	@ args = 0, pretend = 0, frame = 420
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	sub	sp, sp, #428
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	bl	_Z4initv
	ldr	r3, L447
	str	r3, [fp, #-24]
	ldr	r0, L447+4
	bl	printf
	mov	r3, #0
	str	r3, [sp, #0]
	mov	r3, #0
	str	r3, [sp, #4]
	ldr	r0, L447
	ldr	r1, L447+8
	mov	r2, #0
	mov	r3, #0
	bl	_Z12compile_filePiPKcS1_S1_S1_S1_
	mov	r3, r0
	str	r3, [fp, #-32]
	ldr	r2, [fp, #-32]
	ldr	r3, L447
	rsb	r3, r3, r2
	mov	r3, r3, asr #2
	mov	r1, r3
	ldr	r2, [fp, #-32]
	ldr	r3, L447
	rsb	r3, r3, r2
	mov	r3, r3, asr #2
	ldr	r0, L447+12
	mov	r2, r3
	bl	printf
	ldr	r2, L447+16
	mov	r3, #0
	str	r3, [r2, #4]
	ldr	r2, L447+20
	mov	r3, #0
	str	r3, [r2, #0]
	ldr	r0, L447+24
	bl	printf
	mov	r3, #0
	str	r3, [sp, #0]
	mov	r3, #0
	str	r3, [sp, #4]
	ldr	r0, L447
	ldr	r1, L447+8
	ldr	r2, L447+28
	mov	r3, #0
	bl	_Z12compile_filePiPKcS1_S1_S1_S1_
	mov	r3, r0
	str	r3, [fp, #-32]
	ldr	r0, L447+32
	bl	printf
	ldr	r2, L447+36
	ldr	r3, [fp, #-32]
	str	r3, [r2, #0]
	ldr	r3, [fp, #-24]
	mov	lr, pc
	mov	pc, r3
	mov	r3, #0
	mov	r0, r3
	ldmea	fp, {fp, sp, pc}
L448:
	.align	0
L447:
	.word	cod
	.word	LC180
	.word	LC181
	.word	LC182
	.word	sva
	.word	gnw
	.word	LC183
	.word	LC184
	.word	LC185
	.word	gcp
